diff --git a/backend/src/main/java/com/dh/dentalClinicMVC/service/impl/AppointmentServiceImpl.java b/backend/src/main/java/com/dh/dentalClinicMVC/service/impl/AppointmentServiceImpl.java
index dd61a20..a7c7094 100644
--- a/backend/src/main/java/com/dh/dentalClinicMVC/service/impl/AppointmentServiceImpl.java
+++ b/backend/src/main/java/com/dh/dentalClinicMVC/service/impl/AppointmentServiceImpl.java
@@ -16,6 +16,9 @@ import org.springframework.stereotype.Service;
 import java.time.LocalDate;
 import java.time.LocalTime;
 import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeParseException;
+import org.springframework.http.HttpStatus;
+import org.springframework.web.server.ResponseStatusException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -41,29 +44,39 @@ public class AppointmentServiceImpl implements IAppointmentService {
 
     @Override
     public AppointmentDTO save(AppointmentDTO appointmentDTO) {
-        Patient patient = patientRepository.findById(appointmentDTO.getPatient_id())
-                .orElseThrow(
-                        () -> new RuntimeException("Paciente no encontrado con ID: " + appointmentDTO.getPatient_id()));
+    Patient patient = patientRepository.findById(appointmentDTO.getPatient_id())
+        .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND,
+            "Paciente no encontrado con ID: " + appointmentDTO.getPatient_id()));
 
-        Dentist dentist = dentistRepository.findById(appointmentDTO.getDentist_id())
-                .orElseThrow(
-                        () -> new RuntimeException("Dentista no encontrado con ID: " + appointmentDTO.getDentist_id()));
+    Dentist dentist = dentistRepository.findById(appointmentDTO.getDentist_id())
+        .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND,
+            "Dentista no encontrado con ID: " + appointmentDTO.getDentist_id()));
 
         Appointment appointment = new Appointment();
         appointment.setPatient(patient);
         appointment.setDentist(dentist);
 
         DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
-        LocalDate date = LocalDate.parse(appointmentDTO.getDate(), dateFormatter);
+        LocalDate date;
+        try {
+            date = LocalDate.parse(appointmentDTO.getDate(), dateFormatter);
+        } catch (DateTimeParseException e) {
+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Fecha inv√°lida: " + appointmentDTO.getDate());
+        }
 
         // Validaci√≥n: al crear permitimos hoy
         LocalDate today = LocalDate.now();
         if (date.isBefore(today)) {
-            throw new RuntimeException("La fecha no puede ser anterior a hoy");
+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "La fecha no puede ser anterior a hoy");
         }
 
         DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
-        LocalTime time = LocalTime.parse(appointmentDTO.getTime(), timeFormatter);
+        LocalTime time;
+        try {
+            time = LocalTime.parse(appointmentDTO.getTime(), timeFormatter);
+        } catch (DateTimeParseException e) {
+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Hora inv√°lida: " + appointmentDTO.getTime());
+        }
 
         appointment.setDate(date);
         appointment.setTime(time);
@@ -98,13 +111,17 @@ public class AppointmentServiceImpl implements IAppointmentService {
         if (appointmentRepository.findById(appointmentDTO.getId()).isPresent()) {
             Optional<Appointment> appointmentEntity = appointmentRepository.findById(appointmentDTO.getId());
 
-            Patient patient = patientRepository.findById(appointmentDTO.getPatient_id())
-                    .orElseThrow(() -> new RuntimeException(
-                            "Paciente no encontrado con ID: " + appointmentDTO.getPatient_id()));
+            Optional<Patient> patientOptional = patientRepository.findById(appointmentDTO.getPatient_id());
+            if (!patientOptional.isPresent()) {
+                throw new ResourceNotFoundException("Paciente no encontrado con ID: " + appointmentDTO.getPatient_id());
+            }
+            Patient patient = patientOptional.get();
 
-            Dentist dentist = dentistRepository.findById(appointmentDTO.getDentist_id())
-                    .orElseThrow(() -> new RuntimeException(
-                            "Dentista no encontrado con ID: " + appointmentDTO.getDentist_id()));
+            Optional<Dentist> dentistOptional = dentistRepository.findById(appointmentDTO.getDentist_id());
+            if (!dentistOptional.isPresent()) {
+                throw new ResourceNotFoundException("Dentista no encontrado con ID: " + appointmentDTO.getDentist_id());
+            }
+            Dentist dentist = dentistOptional.get();
 
             // Setear las entidades
             appointmentEntity.get().setPatient(patient);
@@ -112,16 +129,26 @@ public class AppointmentServiceImpl implements IAppointmentService {
 
             // Convertir fecha y hora
             DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
-            LocalDate date = LocalDate.parse(appointmentDTO.getDate(), dateFormatter);
+            LocalDate date;
+            try {
+                date = LocalDate.parse(appointmentDTO.getDate(), dateFormatter);
+            } catch (DateTimeParseException e) {
+                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Fecha inv√°lida: " + appointmentDTO.getDate());
+            }
 
             // Validaci√≥n: al editar permitimos "hoy", pero no fechas anteriores
             LocalDate today = LocalDate.now();
             if (date.isBefore(today)) {
-                throw new RuntimeException("La fecha no puede ser anterior a hoy");
+                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "La fecha no puede ser anterior a hoy");
             }
 
             DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
-            LocalTime time = LocalTime.parse(appointmentDTO.getTime(), timeFormatter);
+            LocalTime time;
+            try {
+                time = LocalTime.parse(appointmentDTO.getTime(), timeFormatter);
+            } catch (DateTimeParseException e) {
+                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Hora inv√°lida: " + appointmentDTO.getTime());
+            }
 
             appointmentEntity.get().setDate(date);
             appointmentEntity.get().setTime(time);
@@ -237,7 +264,7 @@ public class AppointmentServiceImpl implements IAppointmentService {
                 .patient_id(appointment.getPatient().getId())
                 .dentist_id(appointment.getDentist().getId())
                 .date(appointment.getDate().toString())
-                .time(appointment.getTime().toString())
+                .time(appointment.getTime().format(DateTimeFormatter.ofPattern("HH:mm")))
                 .description(appointment.getDescription())
                 .status(appointment.getStatus().name())
                 .build();
diff --git a/frontend/public/js/api/appointment-api.js b/frontend/public/js/api/appointment-api.js
index a6268b0..dfc30f8 100644
--- a/frontend/public/js/api/appointment-api.js
+++ b/frontend/public/js/api/appointment-api.js
@@ -1,4 +1,6 @@
 import { API_BASE_URL, handleApiError, getAuthHeaders } from "./config.js";
+import logger from "../logger.js";
+import { parseYMDToLocalDate, formatLocalDate } from "../utils/date-utils.js";
 
 const AppointmentAPI = {
   // Obtener todas las citas con filtros opcionales
@@ -62,9 +64,9 @@ const AppointmentAPI = {
     try {
       this.validateAppointmentData(appointment);
 
-      const headers = getAuthHeaders();
-      console.log("AppointmentAPI - create headers:", headers);
-      console.log("AppointmentAPI - create data:", appointment);
+  const headers = getAuthHeaders();
+  logger.debug("AppointmentAPI - create headers:", headers);
+  logger.debug("AppointmentAPI - create data:", appointment);
 
       const response = await fetch(`${API_BASE_URL}/appointments`, {
         method: "POST",
@@ -90,7 +92,7 @@ const AppointmentAPI = {
   // Actualizar una cita
   async update(appointment) {
     try {
-      console.log("üîÑ AppointmentAPI.update - Datos recibidos:", appointment);
+  logger.debug("üîÑ AppointmentAPI.update - Datos recibidos:", appointment);
       this.validateAppointmentData(appointment, true);
 
       const response = await fetch(`${API_BASE_URL}/appointments`, {
@@ -204,7 +206,7 @@ const AppointmentAPI = {
 
   // Validar datos de la cita
   validateAppointmentData(appointment, isUpdate = false) {
-    console.log(
+    logger.debug(
       "üîç validateAppointmentData - isUpdate:",
       isUpdate,
       "appointment:",
@@ -216,7 +218,7 @@ const AppointmentAPI = {
     }
 
     if (isUpdate && !appointment.id) {
-      console.log(
+      logger.warn(
         "‚ùå validateAppointmentData - ID faltante. appointment.id:",
         appointment.id
       );
@@ -236,11 +238,11 @@ const AppointmentAPI = {
     }
 
     // Validar que la fecha no sea en el pasado
-    const appointmentDate = new Date(appointment.date);
-    const today = new Date();
-    today.setHours(0, 0, 0, 0);
+  const appointmentDate = parseYMDToLocalDate(appointment.date) || new Date(appointment.date);
+  const today = new Date();
+  today.setHours(0, 0, 0, 0);
 
-    if (appointmentDate < today) {
+  if (!appointmentDate || appointmentDate < today) {
       // Si es una actualizaci√≥n, permitir si la fecha no fue modificada
       if (isUpdate) {
         try {
@@ -267,16 +269,21 @@ const AppointmentAPI = {
   formatAppointmentDisplay(appointment) {
     if (!appointment) return null;
 
-    const date = new Date(appointment.date);
-
     return {
       ...appointment,
-      formattedDate: date.toLocaleDateString("es-ES"),
-      formattedTime: date.toLocaleTimeString("es-ES", {
-        hour: "2-digit",
-        minute: "2-digit",
-      }),
-      formattedDateTime: date.toLocaleString("es-ES"),
+      formattedDate: formatLocalDate(appointment.date),
+      formattedTime: (() => {
+        const d = parseYMDToLocalDate(appointment.date) || new Date(appointment.date);
+        try {
+          return d.toLocaleTimeString("es-ES", { hour: "2-digit", minute: "2-digit" });
+        } catch (e) {
+          return "";
+        }
+      })(),
+      formattedDateTime: (() => {
+        const d = parseYMDToLocalDate(appointment.date) || new Date(appointment.date);
+        try { return d.toLocaleString("es-ES"); } catch (e) { return String(appointment.date); }
+      })(),
     };
   },
 };
diff --git a/frontend/public/js/api/patient-api.js b/frontend/public/js/api/patient-api.js
index 08adc44..dba08e8 100644
--- a/frontend/public/js/api/patient-api.js
+++ b/frontend/public/js/api/patient-api.js
@@ -1,4 +1,5 @@
 import { API_BASE_URL, handleApiError, getAuthHeaders } from "./config.js";
+import { parseYMDToLocalDate, formatLocalDate } from "../utils/date-utils.js";
 
 const PatientAPI = {
   // Obtener todos los pacientes
@@ -285,8 +286,8 @@ const PatientAPI = {
         throw new Error("La fecha de admisi√≥n debe tener formato YYYY-MM-DD");
       }
 
-      const admissionDate = new Date(patient.admissionDate);
-      if (isNaN(admissionDate.getTime())) {
+      const admissionDate = parseYMDToLocalDate(patient.admissionDate);
+      if (!admissionDate || isNaN(admissionDate.getTime())) {
         throw new Error("La fecha de admisi√≥n no es v√°lida");
       }
     }
@@ -338,16 +339,7 @@ const PatientAPI = {
   formatDate(dateString) {
     if (!dateString) return null;
 
-    try {
-      const date = new Date(dateString + "T00:00:00"); // Evitar problemas de timezone
-      return date.toLocaleDateString("es-ES", {
-        year: "numeric",
-        month: "long",
-        day: "numeric",
-      });
-    } catch (error) {
-      return dateString; // Retornar el original si no se puede formatear
-    }
+    return formatLocalDate(dateString);
   },
 
   // Obtener estad√≠sticas b√°sicas de pacientes
diff --git a/frontend/public/js/appointment/appointment-controller.js b/frontend/public/js/appointment/appointment-controller.js
index e665889..df51b11 100644
--- a/frontend/public/js/appointment/appointment-controller.js
+++ b/frontend/public/js/appointment/appointment-controller.js
@@ -1,5 +1,6 @@
 // Importar el controlador modular de citas
 import AppointmentController from "../appointment/modules/index.js";
+import logger from "../logger.js";
 
 // Variables globales del controlador
 let appointmentController;
@@ -7,13 +8,13 @@ let isInitialized = false;
 
 // Inicializaci√≥n cuando el DOM est√° listo
 document.addEventListener("DOMContentLoaded", async () => {
-  console.log("üè• Inicializando controlador de citas modular...");
+  logger.info("Inicializando controlador de citas modular...");
 
   try {
     // Verificar si el AppointmentController global ya est√° disponible
     if (window.appointmentController) {
       appointmentController = window.appointmentController;
-      console.log("‚úÖ Usando AppointmentController global existente");
+      logger.info("Usando AppointmentController global existente");
     } else {
       // Crear instancia local del controlador modular
       appointmentController = new AppointmentController();
@@ -21,7 +22,7 @@ document.addEventListener("DOMContentLoaded", async () => {
 
       // Hacer disponible globalmente
       window.appointmentController = appointmentController;
-      console.log("‚úÖ AppointmentController modular inicializado");
+      logger.info("AppointmentController modular inicializado");
     }
 
     isInitialized = true;
@@ -29,9 +30,9 @@ document.addEventListener("DOMContentLoaded", async () => {
     // Configurar funciones globales para compatibilidad
     setupGlobalFunctions();
 
-    console.log("üéâ Controlador de citas modular listo");
+    logger.info("Controlador de citas modular listo");
   } catch (error) {
-    console.error("‚ùå Error al inicializar controlador de citas:", error);
+    logger.error("Error al inicializar controlador de citas:", error);
     showErrorMessage(
       "Error al cargar el sistema de citas. Por favor, recargue la p√°gina."
     );
@@ -117,7 +118,7 @@ function setupGlobalFunctions() {
     return Promise.resolve(false);
   };
 
-  console.log("‚úÖ Funciones globales configuradas");
+  logger.info("Funciones globales configuradas");
 }
 
 // Funci√≥n para mostrar errores
@@ -162,6 +163,6 @@ window.debugAppointmentController = function () {
 // Exportar para uso en m√≥dulos
 export default appointmentController;
 
-console.log(
-  "üìã Controlador de citas modular cargado - Debugging: window.debugAppointmentController()"
+logger.debug(
+  "Controlador de citas modular cargado - Debugging: window.debugAppointmentController()"
 );
diff --git a/frontend/public/js/appointment/appointment-edit-page.js b/frontend/public/js/appointment/appointment-edit-page.js
index 283e127..0a7d204 100644
--- a/frontend/public/js/appointment/appointment-edit-page.js
+++ b/frontend/public/js/appointment/appointment-edit-page.js
@@ -4,13 +4,15 @@
  */
 
 // Funci√≥n para inicializar la p√°gina de edici√≥n
+import logger from "../../logger.js";
+
 function initEditPage() {
   // Establecer el ID de la cita en el input oculto inmediatamente
   document.addEventListener('DOMContentLoaded', function() {
     const appointmentIdInput = document.getElementById('appointmentId');
     if (appointmentIdInput && window.serverData && window.serverData.appointmentId) {
       appointmentIdInput.value = window.serverData.appointmentId;
-      console.log('‚úÖ ID de cita establecido en input oculto:', window.serverData.appointmentId);
+      logger.info('ID de cita establecido en input oculto:', window.serverData.appointmentId);
     }
   });
 }
diff --git a/frontend/public/js/appointment/appointment-list-controller.js b/frontend/public/js/appointment/appointment-list-controller.js
index 8935e7d..e0899dd 100644
--- a/frontend/public/js/appointment/appointment-list-controller.js
+++ b/frontend/public/js/appointment/appointment-list-controller.js
@@ -1,5 +1,6 @@
 // Importar el controlador modular de citas
 import AppointmentController from "../appointment/modules/index.js";
+import logger from "../logger.js";
 
 // Variables globales del controlador de lista
 let appointmentController;
@@ -7,13 +8,13 @@ let isInitialized = false;
 
 // Inicializaci√≥n cuando el DOM est√° listo
 document.addEventListener("DOMContentLoaded", async () => {
-  console.log("üìã Inicializando controlador de lista de citas modular...");
+  logger.info("Inicializando controlador de lista de citas modular...");
 
   try {
     // Verificar si el AppointmentController global ya est√° disponible
     if (window.appointmentController) {
-      appointmentController = window.appointmentController;
-      console.log("‚úÖ Usando AppointmentController global existente");
+  appointmentController = window.appointmentController;
+  logger.info("Usando AppointmentController global existente");
     } else {
       // Crear instancia local del controlador modular
       appointmentController = new AppointmentController();
@@ -21,7 +22,7 @@ document.addEventListener("DOMContentLoaded", async () => {
 
       // Hacer disponible globalmente
       window.appointmentController = appointmentController;
-      console.log("‚úÖ AppointmentController modular inicializado");
+  logger.info("AppointmentController modular inicializado");
     }
 
     // Inicializaci√≥n
@@ -175,8 +176,8 @@ document.addEventListener("DOMContentLoaded", async () => {
         date: filterDate.value,
         status: document.getElementById("filterStatus").value,
       };
-      console.log("Filtros aplicados:", filters);
-      window.filterAppointments(filters);
+  logger.debug("Filtros aplicados:", filters);
+  window.filterAppointments(filters);
     }
 
     // Limpia los filtros y recarga la lista
@@ -203,12 +204,9 @@ document.addEventListener("DOMContentLoaded", async () => {
     // Carga inicial
     window.loadAppointmentsList();
 
-    console.log("üéâ Controlador de lista de citas modular listo");
+    logger.info("Controlador de lista de citas modular listo");
   } catch (error) {
-    console.error(
-      "‚ùå Error al inicializar controlador de lista de citas:",
-      error
-    );
+    logger.error("Error al inicializar controlador de lista de citas:", error);
     showErrorMessage(
       "Error al cargar la lista de citas. Por favor, recargue la p√°gina."
     );
@@ -234,8 +232,6 @@ function setupGlobalFunctions() {
     return [];
   };
 
-  window.filterAppointments({ status: "COMPLETED" });
-
   // Funci√≥n global para buscar citas
   window.searchAppointments = function (searchTerm) {
     if (appointmentController && appointmentController.performSearch) {
@@ -323,23 +319,21 @@ function setupGlobalFunctions() {
         if (appointmentController && appointmentController.deleteAppointment) {
           await appointmentController.deleteAppointment(appointmentId);
           return true;
-        } else {
-          console.error(
-            "‚ùå AppointmentController no disponible para eliminaci√≥n"
-          );
+          } else {
+          logger.error("AppointmentController no disponible para eliminaci√≥n");
           alert("Error: Sistema de citas no disponible");
           return false;
         }
       }
       return false;
     } catch (error) {
-      console.error("‚ùå Error en confirmDeleteAppointment:", error);
+      logger.error("Error en confirmDeleteAppointment:", error);
       alert("Error al eliminar la cita");
       return false;
     }
   };
 
-  console.log("‚úÖ Funciones globales de lista configuradas");
+  logger.info("Funciones globales de lista configuradas");
 }
 
 // Funci√≥n para mostrar errores
@@ -395,6 +389,6 @@ window.debugAppointmentListController = function () {
 // Exportar para uso en m√≥dulos
 export default appointmentController;
 
-console.log(
-  "üìã Controlador de lista de citas modular cargado - Debugging: window.debugAppointmentListController()"
+logger.debug(
+  "Controlador de lista de citas modular cargado - Debugging: window.debugAppointmentListController()"
 );
diff --git a/frontend/public/js/appointment/modules/data-manager.js b/frontend/public/js/appointment/modules/data-manager.js
index bd84632..266af47 100644
--- a/frontend/public/js/appointment/modules/data-manager.js
+++ b/frontend/public/js/appointment/modules/data-manager.js
@@ -1,6 +1,7 @@
 import { API_BASE_URL } from "../../api/config.js";
 import DentistAPI from "../../api/dentist-api.js";
 import AppointmentAPI from "../../api/appointment-api.js";
+import logger from "../../logger.js";
 
 class AppointmentDataManager {
   constructor() {
@@ -26,7 +27,7 @@ class AppointmentDataManager {
       this.dentists = await DentistAPI.getAll();
       return this.dentists;
     } catch (error) {
-      console.error("Error al cargar dentistas:", error);
+  logger.error("Error al cargar dentistas:", error);
       throw new Error("Error al cargar la lista de dentistas");
     }
   }
@@ -53,10 +54,10 @@ class AppointmentDataManager {
       }
 
       this.patients = await response.json();
-      console.log("DataManager - Pacientes/usuarios cargados:", this.patients);
+      logger.debug("DataManager - Pacientes/usuarios cargados:", this.patients);
       return this.patients;
     } catch (error) {
-      console.error("Error al cargar pacientes:", error);
+      logger.error("Error al cargar pacientes:", error);
       throw new Error("Error al cargar la lista de usuarios/pacientes");
     }
   }
@@ -83,9 +84,7 @@ class AppointmentDataManager {
 
       // Si el usuario es ADMIN, no necesita tener un paciente asociado
       if (userRole === "ADMIN") {
-        console.log(
-          "DataManager - Usuario ADMIN detectado, saltando b√∫squeda de paciente"
-        );
+        logger.info("DataManager - Usuario ADMIN detectado, saltando b√∫squeda de paciente");
 
         // Configurar datos b√°sicos para el admin
         localStorage.setItem("patientId", "");
@@ -102,7 +101,7 @@ class AppointmentDataManager {
         };
       }
 
-      console.log("DataManager - Buscando paciente por email:", userEmail);
+  logger.debug("DataManager - Buscando paciente por email:", userEmail);
 
       // Hacer una llamada al backend para obtener el paciente por email
       const response = await fetch(`${API_BASE_URL}/patients`, {
@@ -118,7 +117,7 @@ class AppointmentDataManager {
       }
 
       const allPatients = await response.json();
-      console.log("DataManager - Todos los pacientes:", allPatients);
+  logger.debug("DataManager - Todos los pacientes:", allPatients);
 
       // Buscar el paciente que coincida con el email del usuario
       const currentPatient = allPatients.find(
@@ -126,7 +125,7 @@ class AppointmentDataManager {
       );
 
       if (currentPatient) {
-        console.log("DataManager - Paciente encontrado:", currentPatient);
+    logger.info("DataManager - Paciente encontrado:", currentPatient);
 
         // Guardar los datos del paciente en localStorage (sin el objeto user que es inseguro)
         localStorage.setItem("patientId", currentPatient.id);
@@ -139,7 +138,7 @@ class AppointmentDataManager {
         throw new Error("No se encontr√≥ el paciente asociado al usuario");
       }
     } catch (error) {
-      console.error("Error al cargar datos del paciente:", error);
+      logger.error("Error al cargar datos del paciente:", error);
       throw error;
     }
   }
@@ -152,7 +151,7 @@ class AppointmentDataManager {
       this.appointments = Array.isArray(result) ? result : result.content || [];
       return this.appointments;
     } catch (error) {
-      console.error("Error al cargar citas:", error);
+      logger.error("Error al cargar citas:", error);
       throw new Error("Error al cargar las citas: " + error.message);
     }
   }
@@ -167,7 +166,7 @@ class AppointmentDataManager {
       }
       return appointment;
     } catch (error) {
-      console.error("Error al cargar la cita:", error);
+      logger.error("Error al cargar la cita:", error);
       throw error;
     }
   }
diff --git a/frontend/public/js/appointment/modules/form-manager.js b/frontend/public/js/appointment/modules/form-manager.js
index 5e69d2c..5a437ff 100644
--- a/frontend/public/js/appointment/modules/form-manager.js
+++ b/frontend/public/js/appointment/modules/form-manager.js
@@ -1,4 +1,6 @@
 import AppointmentAPI from "../../api/appointment-api.js";
+import logger from "../../logger.js";
+import { parseYMDToLocalDate } from "../../utils/date-utils.js";
 
 class AppointmentFormManager {
   constructor(uiManager) {
@@ -15,7 +17,7 @@ class AppointmentFormManager {
     const appointmentIdInput = document.getElementById("appointmentId");
 
     // Debug de localStorage
-    console.log("FormManager - localStorage debug:", {
+    logger.debug("FormManager - localStorage debug:", {
       userId: localStorage.getItem("userId"),
       patientId: localStorage.getItem("patientId"),
       userRole: localStorage.getItem("userRole"),
@@ -30,9 +32,9 @@ class AppointmentFormManager {
 
     if (isAdmin) {
       // Si es admin, obtener del select de paciente
-      const patientSelect = document.getElementById("patientSelect"); // ‚úÖ ID correcto
-      console.log("FormManager - patientSelect encontrado:", !!patientSelect);
-      console.log("FormManager - patientSelect.value:", patientSelect?.value);
+  const patientSelect = document.getElementById("patientSelect"); // ‚úÖ ID correcto
+  logger.debug("FormManager - patientSelect encontrado:", !!patientSelect);
+  logger.debug("FormManager - patientSelect.value:", patientSelect?.value);
 
       if (patientSelect && patientSelect.value) {
         const selectedOption =
@@ -85,26 +87,26 @@ class AppointmentFormManager {
     // Agregar ID de la cita si existe (para edici√≥n)
     if (appointmentIdInput && appointmentIdInput.value) {
       formData.id = parseInt(appointmentIdInput.value);
-      console.log(`FormManager - ID de cita encontrado: ${formData.id}`);
+      logger.debug(`FormManager - ID de cita encontrado: ${formData.id}`);
     } else {
-      console.warn("FormManager - No se encontr√≥ ID de cita:", {
+      logger.debug("FormManager - No se encontr√≥ ID de cita:", {
         appointmentIdInputExists: !!appointmentIdInput,
         appointmentIdValue: appointmentIdInput?.value,
         appointmentIdInputType: appointmentIdInput?.type,
       });
     }
 
-    console.log("FormManager - getFormData resultado:", formData);
+    logger.debug("FormManager - getFormData resultado:", formData);
     return formData;
   }
 
   // Validar datos del formulario
   validateFormData(data, isEditing = false) {
-    console.log("FormManager - Validando datos:", data);
+  logger.debug("FormManager - Validando datos:", data);
 
     // Si estamos editando, validar que tenemos un ID
     if (isEditing && (!data.id || isNaN(data.id))) {
-      console.log("FormManager - Error: ID de cita no v√°lido para edici√≥n");
+  logger.warn("FormManager - Error: ID de cita no v√°lido para edici√≥n");
       this.uiManager.showMessage(
         "Error: ID de la cita no encontrado",
         "danger"
@@ -114,21 +116,21 @@ class AppointmentFormManager {
 
     // Validar que se haya seleccionado un dentista
     if (!data.dentist_id || isNaN(data.dentist_id)) {
-      console.log("FormManager - Error: Dentista no v√°lido");
+  logger.warn("FormManager - Error: Dentista no v√°lido");
       this.uiManager.showMessage("Debe seleccionar un odont√≥logo", "danger");
       return false;
     }
 
     // Validar que se haya seleccionado un paciente
     if (!data.patient_id || isNaN(data.patient_id)) {
-      console.log("FormManager - Error: Paciente no v√°lido");
+  logger.warn("FormManager - Error: Paciente no v√°lido");
       this.uiManager.showMessage("Debe seleccionar un paciente", "danger");
       return false;
     }
 
     // Validar fecha
     if (!data.date) {
-      console.log("FormManager - Error: Fecha vac√≠a o no v√°lida");
+  logger.warn("FormManager - Error: Fecha vac√≠a o no v√°lida");
       this.uiManager.showMessage(
         "Debe seleccionar una fecha para la cita",
         "danger"
@@ -138,7 +140,7 @@ class AppointmentFormManager {
 
     // Validar hora
     if (!data.time) {
-      console.log("FormManager - Error: Hora vac√≠a o no v√°lida");
+  logger.warn("FormManager - Error: Hora vac√≠a o no v√°lida");
       this.uiManager.showMessage(
         "Debe seleccionar una hora para la cita",
         "danger"
@@ -148,26 +150,17 @@ class AppointmentFormManager {
 
     // Validar que la fecha no sea en el pasado
     // Usar fecha local sin problemas de zona horaria
-    const selectedDateParts = data.date.split("-");
-    const selectedDate = new Date(
-      parseInt(selectedDateParts[0]),
-      parseInt(selectedDateParts[1]) - 1,
-      parseInt(selectedDateParts[2])
-    );
+    const selectedDate = parseYMDToLocalDate(data.date) || new Date(data.date);
 
     const today = new Date();
-    const todayDate = new Date(
-      today.getFullYear(),
-      today.getMonth(),
-      today.getDate()
-    );
+    const todayDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());
 
     // Validar que la combinaci√≥n fecha+hora no sea en el pasado
     const [hours, minutes] = data.time.split(":");
     const selectedDateTime = new Date(selectedDate.getTime());
     selectedDateTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);
 
-    console.log("FormManager - Comparaci√≥n de fechas y horas:", {
+  logger.debug("FormManager - Comparaci√≥n de fechas y horas:", {
       selectedDate: selectedDate,
       todayDate: todayDate,
       selectedDateTime: selectedDateTime,
@@ -197,7 +190,7 @@ class AppointmentFormManager {
           if (unchangedDate && unchangedTime) {
             // permitir la edici√≥n
           } else {
-            console.log("FormManager - Error: Fecha y/o hora cambiadas y quedan en el pasado");
+            logger.warn("FormManager - Error: Fecha y/o hora cambiadas y quedan en el pasado");
             this.uiManager.showMessage(
               "La fecha y hora de la cita no puede ser anterior al momento actual",
               "danger"
@@ -213,7 +206,7 @@ class AppointmentFormManager {
           return false;
         }
       } else {
-        console.log("FormManager - Error: Fecha y hora en el pasado");
+  logger.warn("FormManager - Error: Fecha y hora en el pasado");
         this.uiManager.showMessage(
           "La fecha y hora de la cita no puede ser anterior al momento actual",
           "danger"
@@ -260,7 +253,7 @@ class AppointmentFormManager {
 
     // Prevenir m√∫ltiples env√≠os usando flag de clase
     if (this.isSubmitting) {
-      console.log("FormManager - Env√≠o ya en progreso, ignorando");
+  logger.info("FormManager - Env√≠o ya en progreso, ignorando");
       return;
     }
 
@@ -278,7 +271,7 @@ class AppointmentFormManager {
     this.uiManager.setLoadingState(submitButton, "Programando...");
 
     try {
-      console.log("FormManager - Enviando datos de cita:", formData);
+  logger.info("FormManager - Enviando datos de cita:", formData);
       await AppointmentAPI.create(formData);
       this.uiManager.showMessage(
         `Cita programada exitosamente para ${formData.patientFirstName} ${formData.patientLastName}`,
@@ -310,13 +303,13 @@ class AppointmentFormManager {
 
     // Prevenir m√∫ltiples env√≠os
     if (this.isSubmitting) {
-      console.log("FormManager - Edici√≥n ya en progreso, ignorando");
+  logger.info("FormManager - Edici√≥n ya en progreso, ignorando");
       return;
     }
 
     // Debug del estado del elemento appointmentId antes de obtener datos
     const appointmentIdElement = document.getElementById("appointmentId");
-    console.log("üîç Debug handleEditSubmit - appointmentId element:", {
+  logger.debug("üîç Debug handleEditSubmit - appointmentId element:", {
       exists: !!appointmentIdElement,
       value: appointmentIdElement?.value,
       type: appointmentIdElement?.type,
@@ -371,7 +364,7 @@ class AppointmentFormManager {
       // Agregar el nuevo listener
       newForm.addEventListener("submit", (e) => this.handleAddSubmit(e));
 
-      console.log("‚úÖ FormManager - Event listeners de agregar cita enlazados");
+  logger.info("‚úÖ FormManager - Event listeners de agregar cita enlazados");
     }
   }
 
@@ -386,7 +379,20 @@ class AppointmentFormManager {
       // Agregar el nuevo listener
       newForm.addEventListener("submit", (e) => this.handleEditSubmit(e));
 
-      console.log("‚úÖ FormManager - Event listeners de editar cita enlazados");
+      // Re-attach patient select change listener (the cloned form removed inline listeners from templates)
+      try {
+        const patientSelect = document.getElementById("patientSelect");
+        if (patientSelect) {
+          patientSelect.addEventListener("change", () => {
+            // let UI manager populate the visible patient fields
+            this.uiManager.updatePatientInfoFields(patientSelect);
+          });
+        }
+      } catch (err) {
+        console.warn("FormManager - No se pudo re-attach patientSelect listener:", err);
+      }
+
+  logger.info("‚úÖ FormManager - Event listeners de editar cita enlazados");
     }
   }
 }
diff --git a/frontend/public/js/appointment/modules/index.js b/frontend/public/js/appointment/modules/index.js
index 91768db..8cde1d8 100644
--- a/frontend/public/js/appointment/modules/index.js
+++ b/frontend/public/js/appointment/modules/index.js
@@ -2,6 +2,7 @@ import AppointmentDataManager from "./data-manager.js";
 import AppointmentUIManager from "./ui-manager.js";
 import AppointmentFormManager from "./form-manager.js";
 import AppointmentValidationManager from "./validation-manager.js";
+import logger from "../../logger.js";
 
 /**
  * Controlador principal de citas que coordina todos los m√≥dulos especializados
@@ -29,10 +30,10 @@ class AppointmentController {
       appointments: [],
     };
 
-    console.log("AppointmentController inicializado:", {
-      currentPage: this.state.currentPage,
-      isAdmin: this.state.isAdmin,
-    });
+        logger.info("AppointmentController inicializado:", {
+          currentPage: this.state.currentPage,
+          isAdmin: this.state.isAdmin,
+        });
   }
 
   // Determinar la p√°gina actual
@@ -47,7 +48,7 @@ class AppointmentController {
   // Inicializaci√≥n principal
   async init() {
     try {
-      console.log("Iniciando AppointmentController...");
+      logger.info("Iniciando AppointmentController...");
 
       // Cargar datos del usuario actual
       await this.loadUserData();
@@ -64,10 +65,10 @@ class AppointmentController {
           await this.initListPage();
           break;
         default:
-          console.warn("P√°gina no reconocida:", this.state.currentPage);
+          logger.warn("P√°gina no reconocida:", this.state.currentPage);
       }
     } catch (error) {
-      console.error("Error al inicializar AppointmentController:", error);
+      logger.error("Error al inicializar AppointmentController:", error);
       this.uiManager.showMessage("Error al cargar la aplicaci√≥n", "danger");
     }
   }
@@ -77,10 +78,7 @@ class AppointmentController {
     try {
       // Verificar si ya tenemos datos del servidor en window.serverData
       if (window.serverData) {
-        console.log(
-          "‚úÖ Usando datos del servidor existentes:",
-          window.serverData
-        );
+        logger.info("‚úÖ Usando datos del servidor existentes:", window.serverData);
 
         // Configurar variables globales del usuario
         window.currentUser = window.serverData.user;
@@ -127,10 +125,10 @@ class AppointmentController {
       // Actualizar estado del controlador
       this.state.isAdmin = serverData.isAdmin;
 
-      console.log("‚úÖ Datos del servidor cargados via API:", serverData);
+      logger.info("‚úÖ Datos del servidor cargados via API:", serverData);
       return serverData;
     } catch (error) {
-      console.error("Error al cargar datos del servidor:", error);
+      logger.error("Error al cargar datos del servidor:", error);
 
       // Intentar usar datos hardcodeados/predeterminados como √∫ltimo fallback
       if (window.isAdmin !== undefined) {
@@ -159,16 +157,16 @@ class AppointmentController {
 
       // Luego cargar datos espec√≠ficos del usuario para el sistema de citas
       this.state.userData = await this.dataManager.loadCurrentUserData();
-      console.log("Datos de usuario cargados:", this.state.userData);
+      logger.info("Datos de usuario cargados:", this.state.userData);
     } catch (error) {
-      console.error("Error al cargar datos de usuario:", error);
+      logger.error("Error al cargar datos de usuario:", error);
       throw error;
     }
   }
 
   // Inicializar p√°gina de agregar cita
   async initAddPage() {
-    console.log("Inicializando p√°gina de agregar cita...");
+  logger.info("Inicializando p√°gina de agregar cita...");
 
     try {
       // Mostrar loading
@@ -201,9 +199,9 @@ class AppointmentController {
       // Ocultar mensaje de loading
       this.uiManager.hideMessage();
 
-      console.log("P√°gina de agregar cita inicializada correctamente");
+      logger.info("P√°gina de agregar cita inicializada correctamente");
     } catch (error) {
-      console.error("Error al inicializar p√°gina de agregar:", error);
+      logger.error("Error al inicializar p√°gina de agregar:", error);
       this.uiManager.showMessage(
         "Error al cargar los datos necesarios",
         "danger"
@@ -213,7 +211,7 @@ class AppointmentController {
 
   // Inicializar p√°gina de editar cita
   async initEditPage() {
-    console.log("Inicializando p√°gina de editar cita...");
+  logger.info("Inicializando p√°gina de editar cita...");
 
     try {
       // Obtener ID de la cita desde la URL o elemento oculto
@@ -222,7 +220,7 @@ class AppointmentController {
         throw new Error("ID de cita no encontrado");
       }
 
-      console.log("üìã ID de cita obtenido:", appointmentId);
+      logger.debug("üìã ID de cita obtenido:", appointmentId);
 
       // Cargar datos necesarios
       const [dentists, patients, appointment] = await Promise.all([
@@ -231,17 +229,14 @@ class AppointmentController {
         this.dataManager.loadAppointmentById(appointmentId),
       ]);
 
-      console.log("‚úÖ Datos cargados:", {
+      logger.info("‚úÖ Datos cargados:", {
         dentists: dentists.length,
         patients: patients.length,
         appointment: appointment,
       });
 
       // Log detallado de la cita para debugging
-      console.log(
-        "üîç Estructura completa de la cita:",
-        JSON.stringify(appointment, null, 2)
-      );
+      logger.debug("üîç Estructura completa de la cita:", JSON.stringify(appointment, null, 2));
 
       this.state.dentists = dentists;
       this.state.patients = patients;
@@ -253,10 +248,7 @@ class AppointmentController {
         patients
       );
 
-      console.log(
-        "üîç Cita enriquecida con datos completos:",
-        enrichedAppointment
-      );
+      logger.debug("üîç Cita enriquecida con datos completos:", enrichedAppointment);
 
       // Configurar la interfaz
       this.uiManager.populateSelects(
@@ -283,9 +275,9 @@ class AppointmentController {
       // Ocultar mensaje de loading
       this.uiManager.hideMessage();
 
-      console.log("‚úÖ P√°gina de editar cita inicializada correctamente");
+      logger.info("‚úÖ P√°gina de editar cita inicializada correctamente");
     } catch (error) {
-      console.error("‚ùå Error al inicializar p√°gina de editar:", error);
+      logger.error("‚ùå Error al inicializar p√°gina de editar:", error);
       this.uiManager.showErrorScreen();
       this.uiManager.showMessage(
         `Error al cargar los datos de la cita: ${error.message}`,
@@ -296,7 +288,7 @@ class AppointmentController {
 
   // Inicializar p√°gina de lista de citas
   async initListPage() {
-    console.log("Inicializando p√°gina de lista de citas...");
+  logger.info("Inicializando p√°gina de lista de citas...");
 
     try {
       // Mostrar loading
@@ -326,9 +318,9 @@ class AppointmentController {
       // Ocultar mensaje de loading
       this.uiManager.hideMessage();
 
-      console.log("P√°gina de lista de citas inicializada correctamente");
+      logger.info("P√°gina de lista de citas inicializada correctamente");
     } catch (error) {
-      console.error("Error al inicializar p√°gina de lista:", error);
+      logger.error("Error al inicializar p√°gina de lista:", error);
       this.uiManager.showMessage("Error al cargar las citas", "danger");
     }
   }
@@ -339,7 +331,7 @@ class AppointmentController {
     if (window.serverData && window.serverData.appointmentId) {
       const id = parseInt(window.serverData.appointmentId);
       if (!isNaN(id)) {
-        console.log("ID de cita obtenido desde serverData:", id);
+        logger.debug("ID de cita obtenido desde serverData:", id);
         return id;
       }
     }
@@ -348,7 +340,7 @@ class AppointmentController {
     const hiddenInput = document.getElementById("appointmentId");
     if (hiddenInput && hiddenInput.value) {
       const id = parseInt(hiddenInput.value);
-      console.log("ID de cita obtenido desde input oculto:", id);
+      logger.debug("ID de cita obtenido desde input oculto:", id);
       return id;
     }
 
@@ -357,7 +349,7 @@ class AppointmentController {
     const id = urlParams.get("id");
     if (id) {
       const parsedId = parseInt(id);
-      console.log("ID de cita obtenido desde URL params:", parsedId);
+      logger.debug("ID de cita obtenido desde URL params:", parsedId);
       return parsedId;
     }
 
@@ -366,7 +358,7 @@ class AppointmentController {
     const lastPart = pathParts[pathParts.length - 1];
     if (lastPart && !isNaN(lastPart)) {
       const parsedId = parseInt(lastPart);
-      console.log("ID de cita obtenido desde pathname:", parsedId);
+      logger.debug("ID de cita obtenido desde pathname:", parsedId);
       return parsedId;
     }
 
@@ -377,7 +369,7 @@ class AppointmentController {
   // Enriquecer datos de cita con informaci√≥n completa del paciente
   async enrichAppointmentData(appointment, dentists, patients) {
     try {
-      console.log("üîÑ Enriqueciendo datos de la cita...");
+  logger.debug("Enriqueciendo datos de la cita...");
 
       // Crear copia del appointment original
       const enrichedAppointment = { ...appointment };
@@ -409,10 +401,10 @@ class AppointmentController {
 
             if (response.ok) {
               patientData = await response.json();
-              console.log("‚úÖ Datos del paciente cargados:", patientData);
+              logger.info("‚úÖ Datos del paciente cargados:", patientData);
             }
           } catch (error) {
-            console.error("Error al cargar datos del paciente:", error);
+            logger.error("Error al cargar datos del paciente:", error);
           }
         }
 
@@ -433,7 +425,7 @@ class AppointmentController {
 
       return enrichedAppointment;
     } catch (error) {
-      console.error("Error al enriquecer datos de la cita:", error);
+      logger.error("Error al enriquecer datos de la cita:", error);
       return appointment; // Devolver original si hay error
     }
   }
@@ -475,7 +467,7 @@ class AppointmentController {
         window.location.reload();
       }, 1500);
     } catch (error) {
-      console.error("Error al eliminar cita:", error);
+      logger.error("Error al eliminar cita:", error);
       this.uiManager.showMessage("Error al eliminar la cita", "danger");
     }
   }
@@ -552,13 +544,11 @@ let initializationCount = 0;
 // Inicializaci√≥n cuando el DOM est√° listo
 document.addEventListener("DOMContentLoaded", async () => {
   initializationCount++;
-  console.log(
-    `üöÄ AppointmentController - Intento de inicializaci√≥n #${initializationCount}`
-  );
+  logger.debug(`üöÄ AppointmentController - Intento de inicializaci√≥n #${initializationCount}`);
 
   try {
     if (appointmentController) {
-      console.log("‚ö†Ô∏è AppointmentController ya existe, reutilizando instancia");
+      logger.warn("‚ö†Ô∏è AppointmentController ya existe, reutilizando instancia");
       return;
     }
 
@@ -568,9 +558,9 @@ document.addEventListener("DOMContentLoaded", async () => {
     // Hacer disponible globalmente para debugging
     window.appointmentController = appointmentController;
 
-    console.log("‚úÖ AppointmentController inicializado correctamente");
+    logger.info("‚úÖ AppointmentController inicializado correctamente");
   } catch (error) {
-    console.error("Error fatal al inicializar la aplicaci√≥n:", error);
+    logger.error("Error fatal al inicializar la aplicaci√≥n:", error);
     alert("Error al cargar la aplicaci√≥n. Por favor, recargue la p√°gina.");
   }
 });
diff --git a/frontend/public/js/appointment/modules/ui-manager.js b/frontend/public/js/appointment/modules/ui-manager.js
index 38de7f0..df53eba 100644
--- a/frontend/public/js/appointment/modules/ui-manager.js
+++ b/frontend/public/js/appointment/modules/ui-manager.js
@@ -1,3 +1,5 @@
+import logger from "../../logger.js";
+
 class AppointmentUIManager {
   constructor() {
     this.currentAppointment = null;
@@ -39,7 +41,7 @@ class AppointmentUIManager {
 
   // Llenar select de dentistas
   populateDentistSelect(selectElement, dentists, includeEmptyOption = false) {
-    console.log("üîß UIManager - Poblando select de dentistas:", {
+    logger.debug("UIManager - Poblando select de dentistas:", {
       selectElement: selectElement?.id || "sin ID",
       dentistsCount: dentists?.length || 0,
       includeEmptyOption,
@@ -72,7 +74,7 @@ class AppointmentUIManager {
       selectElement.appendChild(option);
     });
 
-    console.log("‚úÖ UIManager - Select de dentistas poblado:", {
+    logger.debug("UIManager - Select de dentistas poblado:", {
       finalOptionsCount: selectElement.options.length,
       selectElement: selectElement?.id || "sin ID",
     });
@@ -94,17 +96,13 @@ class AppointmentUIManager {
 
   // Poblar todos los selects de la p√°gina
   async populateSelects(dentists, patients = [], isAdmin = false) {
-    console.log("üîß UIManager - Poblando selects...", {
-      dentists,
-      patients,
-      isAdmin,
-    });
+    logger.debug("UIManager - Poblando selects...", { dentists, patients, isAdmin });
 
     // Poblar select de dentistas
     const dentistSelect = document.getElementById("dentistId");
     if (dentistSelect && dentists) {
       this.populateDentistSelect(dentistSelect, dentists);
-      console.log("‚úÖ Select de dentistas poblado");
+  logger.debug("Select de dentistas poblado");
     }
 
     // Poblar select de pacientes (usuarios que pueden ser pacientes)
@@ -119,7 +117,7 @@ class AppointmentUIManager {
 
       // Poblar con pacientes (que en realidad son usuarios registrados)
       this.populatePatientSelect(patientSelect, patients);
-      console.log("‚úÖ Select de pacientes/usuarios poblado");
+  logger.debug("Select de pacientes/usuarios poblado");
     }
   }
 
@@ -138,15 +136,13 @@ class AppointmentUIManager {
 
   // Llenar datos del usuario (alias para fillUserDataInForm para compatibilidad)
   fillUserData(userData) {
-    console.log("üîß UIManager - Llenando datos de usuario:", userData);
+  logger.debug("UIManager - Llenando datos de usuario:", userData);
     this.fillUserDataInForm(userData);
   }
 
   // Mostrar mensajes (m√©todo unificado)
   showMessage(message, type = "info") {
-    console.log(
-      `üì¢ AppointmentUIManager - Mostrando mensaje: ${message} (${type})`
-    );
+    logger.info(`AppointmentUIManager - Mostrando mensaje: ${message} (${type})`);
 
     // Limpiar mensajes existentes
     this.clearMessages();
@@ -212,7 +208,7 @@ class AppointmentUIManager {
   async loadPatientDataForAppointments(appointments) {
     const token = localStorage.getItem("authToken");
     if (!token) {
-      console.error("No hay token de autenticaci√≥n");
+      logger.error("No hay token de autenticaci√≥n");
       return;
     }
 
@@ -239,11 +235,11 @@ class AppointmentUIManager {
           if (response.ok) {
             return await response.json();
           } else {
-            console.warn(`No se pudo cargar paciente ID ${patientId}`);
+            logger.warn(`No se pudo cargar paciente ID ${patientId}`);
             return null;
           }
         } catch (error) {
-          console.warn(`Error al cargar paciente ID ${patientId}:`, error);
+          logger.warn(`Error al cargar paciente ID ${patientId}:`, error);
           return null;
         }
       });
@@ -260,7 +256,7 @@ class AppointmentUIManager {
         }
       });
 
-      console.log("‚úÖ Datos de pacientes cargados individualmente");
+  logger.info("Datos de pacientes cargados individualmente");
     } catch (error) {
       console.error("Error al cargar datos de pacientes:", error);
     }
@@ -272,16 +268,14 @@ class AppointmentUIManager {
     const noAppointments = document.getElementById("no-appointments");
 
     if (!tbody) {
-      console.error(
-        "‚ùå No se encontr√≥ el elemento tbody con id 'appointments-table-body'"
-      );
+      logger.error("No se encontr√≥ el elemento tbody con id 'appointments-table-body'");
       return;
     }
 
     if (!appointments || appointments.length === 0) {
       tbody.innerHTML = "";
       if (noAppointments) noAppointments.style.display = "block";
-      console.log("üìù No hay citas para mostrar");
+  logger.debug("No hay citas para mostrar");
       return;
     }
 
@@ -363,15 +357,12 @@ class AppointmentUIManager {
       .join("");
 
     tbody.innerHTML = htmlContent;
-    console.log("‚úÖ Tabla de citas actualizada correctamente");
+  logger.info("Tabla de citas actualizada correctamente");
   }
 
   // Llenar formulario de edici√≥n
   fillEditForm(appointment) {
-    console.log(
-      "üîß UIManager - Llenando formulario de edici√≥n con datos:",
-      appointment
-    );
+    logger.debug("UIManager - Llenando formulario de edici√≥n con datos:", appointment);
 
     // Primero, asegurar que el appointmentId se establezca correctamente
     const appointmentIdInput = document.getElementById("appointmentId");
@@ -379,17 +370,9 @@ class AppointmentUIManager {
       appointmentIdInput.value = appointment.id.toString();
       // Forzar el atributo value tambi√©n
       appointmentIdInput.setAttribute("value", appointment.id.toString());
-      console.log(
-        `üîß UIManager - appointmentId establecido: ${appointment.id}`
-      );
-      console.log(
-        `üîß UIManager - appointmentId verificaci√≥n DOM: "${appointmentIdInput.value}"`
-      );
-      console.log(
-        `üîß UIManager - appointmentId atributo value: "${appointmentIdInput.getAttribute(
-          "value"
-        )}"`
-      );
+      logger.debug(`UIManager - appointmentId establecido: ${appointment.id}`);
+      logger.debug(`UIManager - appointmentId verificaci√≥n DOM: "${appointmentIdInput.value}"`);
+      logger.debug(`UIManager - appointmentId atributo value: "${appointmentIdInput.getAttribute("value")}"`);
     } else {
       console.error("‚ùå UIManager - No se pudo establecer appointmentId:", {
         inputExists: !!appointmentIdInput,
@@ -417,7 +400,7 @@ class AppointmentUIManager {
       { id: "description", value: appointment.description || "" },
     ];
 
-    console.log("üîß UIManager - Campos adicionales a llenar:", fields);
+  logger.debug("UIManager - Campos adicionales a llenar:", fields);
 
     // Llenar todos los campos del formulario
     fields.forEach((field) => {
@@ -440,7 +423,7 @@ class AppointmentUIManager {
           const altEl = document.getElementById(altId);
           if (altEl) {
             element = altEl;
-            console.log(`üîß UIManager - Usando ID alternativo "${altId}" para campo "${field.id}"`);
+            logger.debug(`UIManager - Usando ID alternativo "${altId}" para campo "${field.id}"`);
             break;
           }
         }
@@ -452,13 +435,13 @@ class AppointmentUIManager {
         if (element.id === "patientFirstName" && field.id === "patientName") {
           const firstName = (field.value || "").toString().trim().split(" ")[0] || "";
           element.value = firstName;
-          console.log(`‚úÖ Campo ${element.id} (alternativo) llenado con: "${element.value}"`);
+          logger.debug(`Campo ${element.id} (alternativo) llenado con: "${element.value}"`);
         } else {
           element.value = field.value;
-          console.log(`‚úÖ Campo ${element.id} llenado con: "${field.value}"`);
+          logger.debug(`Campo ${element.id} llenado con: "${field.value}"`);
         }
       } else {
-        console.warn(`‚ö†Ô∏è No se encontr√≥ elemento con ID: ${field.id} (y no se hallaron alternativos)`);
+        logger.warn(`No se encontr√≥ elemento con ID: ${field.id} (y no se hallaron alternativos)`);
       }
     });
 
@@ -471,7 +454,7 @@ class AppointmentUIManager {
     // Establecer el paciente seleccionado en el select de pacientes
     const patientId = appointment.patientId || appointment.patient_id;
     if (patientId) {
-      console.log(`üîß Intentando seleccionar paciente ${patientId} inmediatamente (retry interno si es necesario)`);
+      logger.debug(`Intentando seleccionar paciente ${patientId} inmediatamente (retry interno si es necesario)`);
       this.setSelectedPatient(patientId);
     }
 
@@ -493,7 +476,7 @@ class AppointmentUIManager {
         if (pe) pe.value = appointment.patientEmail || "";
         if (patientInfoFields) patientInfoFields.style.display = "flex";
 
-        console.log("‚úÖ Campos visibles de paciente rellenados expl√≠citamente desde datos de la cita");
+  logger.info("Campos visibles de paciente rellenados expl√≠citamente desde datos de la cita");
       }
     } catch (err) {
       console.warn("‚ö†Ô∏è No se pudo rellenar expl√≠citamente los campos visibles del paciente:", err);
@@ -515,7 +498,7 @@ class AppointmentUIManager {
       console.warn("‚ö†Ô∏è No se pudieron setear atributos originales de fecha/hora:", err);
     }
 
-    console.log("‚úÖ UIManager - Formulario de edici√≥n llenado completamente");
+  logger.info("UIManager - Formulario de edici√≥n llenado completamente");
   }
 
   // Funci√≥n espec√≠fica para establecer el dentista seleccionado
@@ -528,23 +511,20 @@ class AppointmentUIManager {
       return;
     }
 
-    console.log(`üîß Estableciendo dentista seleccionado: ${dentistId}`);
+  logger.debug(`Estableciendo dentista seleccionado: ${dentistId}`);
 
     // Intentar establecer el valor
     dentistSelect.value = dentistId.toString();
 
     // Verificar que se estableci√≥ correctamente
     if (dentistSelect.value === dentistId.toString()) {
-      console.log(`‚úÖ Dentista ${dentistId} seleccionado exitosamente`);
+  logger.info(`Dentista ${dentistId} seleccionado exitosamente`);
     } else {
-      console.warn(`‚ö†Ô∏è No se pudo seleccionar dentista ${dentistId}`);
-      console.log("üîç Valor actual del select:", dentistSelect.value);
-      console.log(
-        "üîç Opciones disponibles:",
-        Array.from(dentistSelect.options).map((opt) => ({
-          value: opt.value,
-          text: opt.text,
-        }))
+        logger.warn(`No se pudo seleccionar dentista ${dentistId}`);
+        logger.debug("Valor actual del select:", dentistSelect.value);
+        logger.debug(
+        "Opciones disponibles:",
+        Array.from(dentistSelect.options).map((opt) => ({ value: opt.value, text: opt.text }))
       );
 
       // Intentar forzar la selecci√≥n buscando la opci√≥n manualmente
@@ -553,7 +533,7 @@ class AppointmentUIManager {
       );
       if (targetOption) {
         targetOption.selected = true;
-        console.log(`‚úÖ Forzada selecci√≥n del dentista ${dentistId}`);
+        logger.info(`Forzada selecci√≥n del dentista ${dentistId}`);
       }
     }
   }
@@ -568,7 +548,7 @@ class AppointmentUIManager {
       return;
     }
 
-    console.log(`üîß Estableciendo paciente seleccionado: ${patientId}`);
+  logger.debug(`Estableciendo paciente seleccionado: ${patientId}`);
 
     // Retry logic: options may not be populated yet. Try up to N times with delay.
     const trySelect = (attempt = 1, maxAttempts = 10, delay = 50) => {
@@ -576,7 +556,7 @@ class AppointmentUIManager {
       patientSelect.value = patientId.toString();
 
       if (patientSelect.value === patientId.toString()) {
-        console.log(`‚úÖ Paciente ${patientId} seleccionado exitosamente (intento ${attempt})`);
+  logger.info(`Paciente ${patientId} seleccionado exitosamente (intento ${attempt})`);
         this.updatePatientInfoFields(patientSelect);
         return;
       }
@@ -587,17 +567,17 @@ class AppointmentUIManager {
       );
       if (targetOption) {
         targetOption.selected = true;
-        console.log(`‚úÖ Forzada selecci√≥n del paciente ${patientId} (intento ${attempt})`);
+  logger.info(`Forzada selecci√≥n del paciente ${patientId} (intento ${attempt})`);
         this.updatePatientInfoFields(patientSelect);
         return;
       }
 
       // If not found and we can retry, wait and retry
       if (attempt < maxAttempts) {
-        console.warn(`‚ö†Ô∏è Intento ${attempt} - opci√≥n paciente ${patientId} no encontrada a√∫n, reintentando en ${delay}ms...`);
+  logger.warn(`Intento ${attempt} - opci√≥n paciente ${patientId} no encontrada a√∫n, reintentando en ${delay}ms...`);
         setTimeout(() => trySelect(attempt + 1, maxAttempts, delay * 1.5), delay);
       } else {
-        console.error(`‚ùå No se pudo seleccionar paciente ${patientId} tras ${maxAttempts} intentos. Opciones actuales:`,
+        logger.error(`No se pudo seleccionar paciente ${patientId} tras ${maxAttempts} intentos. Opciones actuales:`,
           Array.from(patientSelect.options).map(o => ({ value: o.value, text: o.text })));
       }
     };
@@ -640,7 +620,7 @@ class AppointmentUIManager {
   if (altPatientName) altPatientName.value = `${firstName} ${lastName}`.trim();
   if (altPatientFirst) altPatientFirst.value = firstName;
 
-      console.log("‚úÖ Campos de informaci√≥n del paciente actualizados");
+  logger.info("Campos de informaci√≥n del paciente actualizados");
     } else if (patientInfoFields) {
       // Ocultar campos si no hay selecci√≥n
       patientInfoFields.style.display = "none";
@@ -714,7 +694,7 @@ class AppointmentUIManager {
 
   // Ocultar mensajes y pantalla de carga
   hideMessage() {
-    console.log("üîÑ UIManager - Ocultando mensajes y loading");
+  logger.debug("UIManager - Ocultando mensajes y loading");
     this.clearMessages();
     this.hideLoadingScreen();
   }
diff --git a/frontend/public/js/appointment/modules/validation-manager.js b/frontend/public/js/appointment/modules/validation-manager.js
index 92f29f9..7e8a56f 100644
--- a/frontend/public/js/appointment/modules/validation-manager.js
+++ b/frontend/public/js/appointment/modules/validation-manager.js
@@ -1,3 +1,5 @@
+import { parseYMDToLocalDate } from "../../utils/date-utils.js";
+
 class AppointmentValidationManager {
   constructor() {
     this.workingHours = {
@@ -28,10 +30,16 @@ class AppointmentValidationManager {
   isValidWorkingDay(date) {
     if (!date) return false;
 
-    const dateObj = new Date(date + "T00:00:00");
-    const dayOfWeek = dateObj.getDay(); // 0 = Domingo, 6 = S√°bado
+    // Construir Date local desde YYYY-MM-DD para evitar desfases
+    const dateObj = parseYMDToLocalDate(date);
+    if (dateObj && !isNaN(dateObj.getTime())) {
+      const dayOfWeek = dateObj.getDay(); // 0 = Domingo, 6 = S√°bado
+      return dayOfWeek >= 1 && dayOfWeek <= 5; // Lunes a Viernes
+    }
 
-    return dayOfWeek >= 1 && dayOfWeek <= 5; // Lunes a Viernes
+    // Fallback: intento con T00:00:00
+    const fallback = new Date(date + "T00:00:00");
+    return fallback.getDay() >= 1 && fallback.getDay() <= 5;
   }
 
   // Validar formato de fecha
@@ -41,8 +49,8 @@ class AppointmentValidationManager {
     const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
     if (!dateRegex.test(dateString)) return false;
 
-    const date = new Date(dateString + "T00:00:00");
-    return !isNaN(date.getTime());
+    const date = parseYMDToLocalDate(dateString);
+    return date instanceof Date && !isNaN(date.getTime());
   }
 
   // Validar formato de hora
@@ -57,23 +65,30 @@ class AppointmentValidationManager {
   isNotPastDate(date) {
     if (!date) return false;
 
-    const selectedDate = new Date(date + "T00:00:00");
-    const today = new Date();
-    today.setHours(0, 0, 0, 0);
-
-    return selectedDate >= today;
+    try {
+      const { parseYMDToLocalDate } = await import("../../utils/date-utils.js");
+      const selectedDate = parseYMDToLocalDate(date);
+      const today = new Date();
+      today.setHours(0, 0, 0, 0);
+      return selectedDate && selectedDate >= today;
+    } catch (e) {
+      const selectedDate = new Date(date + "T00:00:00");
+      const today = new Date();
+      today.setHours(0, 0, 0, 0);
+      return selectedDate >= today;
+    }
   }
 
   // Validar que la hora no sea en el pasado (solo para el d√≠a actual)
   isNotPastTime(date, time) {
     if (!date || !time) return false;
 
-    const selectedDate = new Date(date + "T00:00:00");
+    const selectedDate = parseYMDToLocalDate(date);
     const today = new Date();
     today.setHours(0, 0, 0, 0);
 
     // Si no es hoy, cualquier hora es v√°lida
-    if (selectedDate.getTime() !== today.getTime()) {
+    if (!selectedDate || selectedDate.getTime() !== today.getTime()) {
       return true;
     }
 
diff --git a/frontend/public/js/auth/login-controller.js b/frontend/public/js/auth/login-controller.js
index 0ee7b96..faf60c9 100644
--- a/frontend/public/js/auth/login-controller.js
+++ b/frontend/public/js/auth/login-controller.js
@@ -1,4 +1,5 @@
 import AuthController from "../auth/modules/index.js";
+import logger from "../logger.js";
 
 // Variables globales del controlador
 let authController;
@@ -6,13 +7,13 @@ let isInitialized = false;
 
 // Inicializaci√≥n cuando el DOM est√° listo
 document.addEventListener("DOMContentLoaded", async () => {
-  console.log("üöÄ Inicializando controlador de login modular...");
+  logger.info("üöÄ Inicializando controlador de login modular...");
 
   try {
     // Verificar si el AuthController global ya est√° disponible
-    if (window.authController) {
+      if (window.authController) {
       authController = window.authController;
-      console.log("‚úÖ Usando AuthController global existente");
+      logger.info("‚úÖ Usando AuthController global existente");
     } else {
       // Crear instancia local del controlador modular
       authController = new AuthController();
@@ -20,7 +21,7 @@ document.addEventListener("DOMContentLoaded", async () => {
 
       // Hacer disponible globalmente
       window.authController = authController;
-      console.log("‚úÖ AuthController modular inicializado");
+      logger.info("‚úÖ AuthController modular inicializado");
     }
 
     isInitialized = true;
@@ -28,9 +29,9 @@ document.addEventListener("DOMContentLoaded", async () => {
     // Configurar funciones globales para compatibilidad
     setupGlobalFunctions();
 
-    console.log("üéâ Controlador de login modular listo");
+    logger.info("üéâ Controlador de login modular listo");
   } catch (error) {
-    console.error("‚ùå Error al inicializar controlador de login:", error);
+    logger.error("‚ùå Error al inicializar controlador de login:", error);
     showErrorMessage(
       "Error al cargar el sistema de login. Por favor, recargue la p√°gina."
     );
@@ -101,7 +102,7 @@ function setupGlobalFunctions() {
     return false;
   };
 
-  console.log("‚úÖ Funciones globales configuradas");
+  logger.info("‚úÖ Funciones globales configuradas");
 }
 
 // Funci√≥n para mostrar errores
@@ -142,6 +143,6 @@ window.debugLoginController = function () {
 // Exportar para uso en m√≥dulos
 export default authController;
 
-console.log(
+logger.debug(
   "üìã Controlador de login modular cargado - Debugging: window.debugLoginController()"
 );
diff --git a/frontend/public/js/auth/modules/data-manager.js b/frontend/public/js/auth/modules/data-manager.js
index d217b2d..9a9c8d7 100644
--- a/frontend/public/js/auth/modules/data-manager.js
+++ b/frontend/public/js/auth/modules/data-manager.js
@@ -1,3 +1,4 @@
+import logger from "../../logger.js";
 class AuthDataManager {
   constructor() {
     this.currentUser = null;
@@ -9,7 +10,7 @@ class AuthDataManager {
   // Procesar login
   async processLogin(credentials) {
     try {
-      console.log(
+      logger.info(
         "üîê AuthDataManager - Procesando login para:",
         credentials.email
       );
@@ -38,10 +39,10 @@ class AuthDataManager {
 
         // Si contiene el script de sincronizaci√≥n, significa que el login fue exitoso
         if (responseText.includes("localStorage.setItem")) {
-          console.log("‚úÖ Login exitoso - el servidor configur√≥ localStorage");
+          logger.info("‚úÖ Login exitoso - el servidor configur√≥ localStorage");
 
           // *** DEBUG: Mostrar exactamente qu√© recibimos del servidor ***
-          console.log("üîç HTML RESPONSE COMPLETO:", responseText);
+          logger.debug("üîç HTML RESPONSE COMPLETO:", responseText);
 
           // Extraer y ejecutar manualmente los comandos localStorage del HTML
           const scriptContent = responseText.match(
@@ -52,7 +53,7 @@ class AuthDataManager {
           );
 
           if (localStorageCommands) {
-            console.log(
+            logger.debug(
               "üîß Ejecutando comandos localStorage manualmente:",
               localStorageCommands
             );
@@ -60,7 +61,7 @@ class AuthDataManager {
               try {
                 eval(command);
               } catch (error) {
-                console.error("Error ejecutando comando:", command, error);
+                logger.error("Error ejecutando comando:", command, error);
               }
             });
           }
@@ -80,7 +81,7 @@ class AuthDataManager {
           };
 
           // *** DEBUG: Mostrar qu√© se ley√≥ de localStorage ***
-          console.log("üîç DATOS LEIDOS DE LOCALSTORAGE:", result);
+          logger.debug("üîç DATOS LEIDOS DE LOCALSTORAGE:", result);
 
           // Actualizar estado local
           await this.handleLoginSuccess(result);
@@ -94,7 +95,7 @@ class AuthDataManager {
         throw new Error(`Error de servidor: ${response.status}`);
       }
     } catch (error) {
-      console.error("‚ùå Error en login:", error);
+      logger.error("‚ùå Error en login:", error);
       throw new Error(`Error de autenticaci√≥n: ${error.message}`);
     }
   }
@@ -102,7 +103,7 @@ class AuthDataManager {
   // Procesar registro
   async processRegister(userData) {
     try {
-      console.log(
+      logger.info(
         "üìù AuthDataManager - Procesando registro para:",
         userData.email
       );
@@ -124,7 +125,7 @@ class AuthDataManager {
 
       if (response.ok) {
         // El registro fue exitoso, el servidor redirige al login
-        console.log("‚úÖ Registro exitoso para:", userData.email);
+        logger.info("‚úÖ Registro exitoso para:", userData.email);
         return { success: true, message: "Registro exitoso" };
       } else {
         const errorText = await response.text();
@@ -137,7 +138,7 @@ class AuthDataManager {
         }
       }
     } catch (error) {
-      console.error("‚ùå Error en registro:", error);
+      logger.error("‚ùå Error en registro:", error);
       throw new Error(`Error de registro: ${error.message}`);
     }
   }
@@ -145,7 +146,7 @@ class AuthDataManager {
   // Manejar respuesta exitosa de login
   async handleLoginSuccess(loginResult) {
     try {
-      console.log("üîç Respuesta procesada:", loginResult);
+      logger.debug("üîç Respuesta procesada:", loginResult);
 
       // El servidor Node.js ya manej√≥ localStorage y cookies
       // Solo necesitamos actualizar el estado local del controlador
@@ -178,7 +179,7 @@ class AuthDataManager {
           ...loginResult,
         };
 
-        console.log("‚úÖ Estado local actualizado:", {
+        logger.info("‚úÖ Estado local actualizado:", {
           userId: userId,
           userRole: userRole,
           authToken: authToken ? "‚úÖ Token presente" : "‚ùå No hay token",
@@ -188,7 +189,7 @@ class AuthDataManager {
         throw new Error("No se pudieron leer los datos de localStorage");
       }
     } catch (error) {
-      console.error("‚ùå Error al actualizar estado local:", error);
+      logger.error("‚ùå Error al actualizar estado local:", error);
       throw error;
     }
   }
@@ -286,7 +287,7 @@ class AuthDataManager {
   // Cerrar sesi√≥n
   async logout() {
     try {
-      console.log("üö™ AuthDataManager - Cerrando sesi√≥n...");
+      logger.info("üö™ AuthDataManager - Cerrando sesi√≥n...");
 
       // Usar la ruta del frontend que maneja sesiones y cookies
       try {
@@ -295,20 +296,20 @@ class AuthDataManager {
         });
 
         if (response.ok) {
-          console.log("‚úÖ Logout notificado al servidor");
+          logger.info("‚úÖ Logout notificado al servidor");
         }
       } catch (error) {
-        console.warn("‚ö†Ô∏è Error al notificar logout al servidor:", error);
+        logger.warn("‚ö†Ô∏è Error al notificar logout al servidor:", error);
       }
 
       // El servidor ya limpia las cookies y sesiones
       // Solo necesitamos limpiar el estado local
       this.clearSessionData();
 
-      console.log("‚úÖ Sesi√≥n cerrada exitosamente");
+      logger.info("‚úÖ Sesi√≥n cerrada exitosamente");
       return true;
     } catch (error) {
-      console.error("‚ùå Error al cerrar sesi√≥n:", error);
+      logger.error("‚ùå Error al cerrar sesi√≥n:", error);
       throw error;
     }
   }
@@ -391,7 +392,7 @@ class AuthDataManager {
 
       return response.ok;
     } catch (error) {
-      console.error("‚ùå Error al validar sesi√≥n:", error);
+      logger.error("‚ùå Error al validar sesi√≥n:", error);
       return false;
     }
   }
@@ -425,7 +426,7 @@ class AuthDataManager {
 
       return result;
     } catch (error) {
-      console.error("‚ùå Error al refrescar token:", error);
+      logger.error("‚ùå Error al refrescar token:", error);
       throw error;
     }
   }
diff --git a/frontend/public/js/auth/modules/form-manager.js b/frontend/public/js/auth/modules/form-manager.js
index 3c5bb10..9d25fb9 100644
--- a/frontend/public/js/auth/modules/form-manager.js
+++ b/frontend/public/js/auth/modules/form-manager.js
@@ -1,3 +1,5 @@
+import logger from "../../logger.js";
+
 class AuthFormManager {
   constructor(dataManager, uiManager) {
     this.dataManager = dataManager;
@@ -15,7 +17,7 @@ class AuthFormManager {
       password: document.getElementById("password")?.value || "",
     };
 
-    console.log("üìù AuthFormManager - getLoginFormData:", {
+    logger.debug("AuthFormManager - getLoginFormData:", {
       email: formData.email,
       password: formData.password ? "***" : "",
     });
@@ -44,7 +46,7 @@ class AuthFormManager {
       },
     };
 
-    console.log("üìù AuthFormManager - getRegisterFormData:", {
+    logger.debug("AuthFormManager - getRegisterFormData:", {
       ...formData,
       password: formData.password ? "***" : "",
       confirmPassword: formData.confirmPassword ? "***" : "",
@@ -56,7 +58,7 @@ class AuthFormManager {
   // Manejar env√≠o del formulario de login
   async handleLoginSubmit(e) {
     e.preventDefault();
-    console.log("üîê AuthFormManager - Procesando login...");
+  logger.debug("AuthFormManager - Procesando login...");
 
     const formData = this.getLoginFormData();
     if (!formData) {
@@ -96,7 +98,7 @@ class AuthFormManager {
   // Manejar env√≠o del formulario de registro
   async handleRegisterSubmit(e) {
     e.preventDefault();
-    console.log("üìù AuthFormManager - Procesando registro...");
+  logger.debug("AuthFormManager - Procesando registro...");
 
     const formData = this.getRegisterFormData();
     if (!formData) {
@@ -140,7 +142,7 @@ class AuthFormManager {
   // Manejar logout
   async handleLogout() {
     try {
-      console.log("üö™ AuthFormManager - Procesando logout...");
+  logger.debug("AuthFormManager - Procesando logout...");
 
       this.uiManager.showGlobalLoading("Cerrando sesi√≥n...");
 
@@ -167,7 +169,7 @@ class AuthFormManager {
     if (form) {
       form.reset();
       this.uiManager.clearFormValidation(form);
-      console.log(`üßπ Formulario ${formId} limpiado`);
+  logger.debug(`Formulario ${formId} limpiado`);
     }
   }
 
@@ -183,7 +185,7 @@ class AuthFormManager {
       // Configurar toggle de contrase√±a - COMENTAR ESTA L√çNEA:
       // this.uiManager.setupPasswordToggle(passwordField);
 
-      console.log("‚úÖ Eventos del formulario de login configurados");
+  logger.info("Eventos del formulario de login configurados");
     }
   }
 
@@ -201,7 +203,7 @@ class AuthFormManager {
       // const confirmPasswordField = document.getElementById("confirmPassword");
       // this.uiManager.setupPasswordToggle(passwordField, confirmPasswordField);
 
-      console.log("‚úÖ Eventos del formulario de registro configurados");
+  logger.info("Eventos del formulario de registro configurados");
     }
   }
 
@@ -228,7 +230,7 @@ class AuthFormManager {
     });
 
     if (logoutButtons.length > 0) {
-      console.log(`‚úÖ ${logoutButtons.length} botones de logout configurados`);
+      logger.info(`${logoutButtons.length} botones de logout configurados`);
     }
   }
 
@@ -267,7 +269,7 @@ class AuthFormManager {
 
     if (hasSession) {
       const userData = this.dataManager.getCurrentUserData();
-      console.log("‚ÑπÔ∏è Sesi√≥n activa detectada:", {
+      logger.debug("Sesi√≥n activa detectada:", {
         userId: userData.id,
         email: userData.email,
         role: userData.role,
@@ -279,7 +281,7 @@ class AuthFormManager {
         currentPath.includes("/auth/login") ||
         currentPath.includes("/auth/register")
       ) {
-        console.log("üîÑ Redirigiendo desde auth a dashboard...");
+  logger.debug("Redirigiendo desde auth a dashboard...");
         const defaultUrl = userData.isAdmin ? "/dentists" : "/appointments";
         window.location.href = defaultUrl;
       }
@@ -296,7 +298,7 @@ class AuthFormManager {
 
     // Si no es p√°gina de auth y no hay sesi√≥n, redireccionar a login
     if (!isAuthPage && !hasSession) {
-      console.log("üîí Acceso denegado - redirigiendo a login");
+  logger.warn("Acceso denegado - redirigiendo a login");
       sessionStorage.setItem("returnUrl", currentPath);
       window.location.href = "/users/login";
       return false;
@@ -304,7 +306,7 @@ class AuthFormManager {
 
     // Si es p√°gina de auth y hay sesi√≥n, redireccionar a dashboard
     if (isAuthPage && hasSession) {
-      console.log("üîÑ Ya autenticado - redirigiendo a dashboard");
+  logger.debug("Ya autenticado - redirigiendo a dashboard");
       const userData = this.dataManager.getCurrentUserData();
       const defaultUrl = userData.isAdmin ? "/dentists" : "/appointments";
       window.location.href = defaultUrl;
@@ -322,7 +324,7 @@ class AuthFormManager {
       try {
         if (this.dataManager.hasActiveSession()) {
           await this.dataManager.refreshToken();
-          console.log("üîÑ Token refrescado autom√°ticamente");
+          logger.debug("Token refrescado autom√°ticamente");
         }
       } catch (error) {
         console.warn("‚ö†Ô∏è Error al refrescar token:", error);
@@ -354,7 +356,7 @@ class AuthFormManager {
 
   // Inicializar todas las funcionalidades del FormManager
   init() {
-    console.log("üîß AuthFormManager - Inicializando...");
+  logger.debug("AuthFormManager - Inicializando...");
 
     // Verificar sesi√≥n activa
     this.checkActiveSession();
@@ -371,7 +373,7 @@ class AuthFormManager {
     this.setupTokenRefresh();
     this.setupWindowEvents();
 
-    console.log("‚úÖ AuthFormManager inicializado");
+  logger.info("AuthFormManager inicializado");
   }
 }
 
diff --git a/frontend/public/js/auth/modules/index.js b/frontend/public/js/auth/modules/index.js
index 3a9ef7c..bb7bf50 100644
--- a/frontend/public/js/auth/modules/index.js
+++ b/frontend/public/js/auth/modules/index.js
@@ -2,6 +2,7 @@ import DataManager from "./data-manager.js";
 import UIManager from "./ui-manager.js";
 import FormManager from "./form-manager.js";
 import ValidationManager from "./validation-manager.js";
+import logger from "../../logger.js";
 
 /**
  * Controlador principal de autenticaci√≥n que coordina todos los m√≥dulos especializados
@@ -27,7 +28,7 @@ class AuthController {
       sessionActive: false,
     };
 
-    console.log("AuthController inicializado:", {
+    logger.info("AuthController inicializado:", {
       currentPage: this.state.currentPage,
     });
   }
@@ -44,7 +45,7 @@ class AuthController {
   // Inicializaci√≥n principal
   async init() {
     try {
-      console.log("Iniciando AuthController...");
+  logger.debug("Iniciando AuthController...");
 
       // Verificar estado de sesi√≥n
       await this.checkAuthenticationState();
@@ -82,7 +83,7 @@ class AuthController {
         this.state.currentUser = this.dataManager.getCurrentUserData();
         this.state.isAuthenticated = true;
 
-        console.log("Estado de autenticaci√≥n:", {
+        logger.debug("Estado de autenticaci√≥n:", {
           isAuthenticated: this.state.isAuthenticated,
           user: this.state.currentUser?.email,
           role: this.state.currentUser?.role,
@@ -97,12 +98,12 @@ class AuthController {
 
   // Inicializar p√°gina de login
   async initLoginPage() {
-    console.log("Inicializando p√°gina de login...");
+  logger.debug("Inicializando p√°gina de login...");
 
     try {
       // Si ya est√° autenticado, redireccionar
       if (this.state.isAuthenticated) {
-        console.log("Usuario ya autenticado, redirigiendo...");
+  logger.debug("Usuario ya autenticado, redirigiendo...");
         const defaultUrl = this.state.currentUser.isAdmin
           ? "/dentists"
           : "/appointments";
@@ -125,7 +126,7 @@ class AuthController {
       // Configurar eventos del formulario
       this.formManager.bindLoginFormEvents();
 
-      console.log("P√°gina de login inicializada correctamente");
+  logger.info("P√°gina de login inicializada correctamente");
     } catch (error) {
       console.error("Error al inicializar p√°gina de login:", error);
       this.uiManager.showError("Error al cargar el formulario de login");
@@ -134,12 +135,12 @@ class AuthController {
 
   // Inicializar p√°gina de registro
   async initRegisterPage() {
-    console.log("Inicializando p√°gina de registro...");
+  logger.debug("Inicializando p√°gina de registro...");
 
     try {
       // Si ya est√° autenticado, redireccionar
       if (this.state.isAuthenticated) {
-        console.log("Usuario ya autenticado, redirigiendo...");
+  logger.debug("Usuario ya autenticado, redirigiendo...");
         const defaultUrl = this.state.currentUser.isAdmin
           ? "/dentists"
           : "/appointments";
@@ -162,7 +163,7 @@ class AuthController {
       // Configurar eventos del formulario
       this.formManager.bindRegisterFormEvents();
 
-      console.log("P√°gina de registro inicializada correctamente");
+  logger.info("P√°gina de registro inicializada correctamente");
     } catch (error) {
       console.error("Error al inicializar p√°gina de registro:", error);
       this.uiManager.showError("Error al cargar el formulario de registro");
@@ -171,7 +172,7 @@ class AuthController {
 
   // Inicializar p√°gina de logout
   async initLogoutPage() {
-    console.log("Inicializando proceso de logout...");
+  logger.debug("Inicializando proceso de logout...");
 
     try {
       // Mostrar loading
@@ -193,7 +194,7 @@ class AuthController {
 
     // Si no es ruta p√∫blica y no est√° autenticado
     if (!isPublicRoute && !this.state.isAuthenticated) {
-      console.log("üîí Acceso denegado a ruta protegida:", currentPath);
+  logger.warn("Acceso denegado a ruta protegida:", currentPath);
 
       // Guardar URL de retorno
       sessionStorage.setItem("returnUrl", currentPath);
@@ -228,7 +229,7 @@ class AuthController {
   // Procesar login (llamada externa)
   async processLogin(credentials) {
     try {
-      console.log("üîê AuthController - Procesando login...");
+  logger.debug("AuthController - Procesando login...");
 
       const result = await this.dataManager.processLogin(credentials);
 
@@ -245,7 +246,7 @@ class AuthController {
   // Procesar registro (llamada externa)
   async processRegister(userData) {
     try {
-      console.log("üìù AuthController - Procesando registro...");
+  logger.debug("AuthController - Procesando registro...");
 
       const result = await this.dataManager.processRegister(userData);
 
@@ -259,7 +260,7 @@ class AuthController {
   // Procesar logout (llamada externa)
   async processLogout() {
     try {
-      console.log("üö™ AuthController - Procesando logout...");
+  logger.debug("AuthController - Procesando logout...");
 
       await this.dataManager.logout();
 
@@ -298,7 +299,7 @@ class AuthController {
   // Refrescar estado de autenticaci√≥n
   async refreshAuthState() {
     try {
-      console.log("üîÑ Refrescando estado de autenticaci√≥n...");
+  logger.debug("Refrescando estado de autenticaci√≥n...");
 
       await this.checkAuthenticationState();
 
diff --git a/frontend/public/js/auth/modules/ui-manager.js b/frontend/public/js/auth/modules/ui-manager.js
index 6bb75b4..c2f63f0 100644
--- a/frontend/public/js/auth/modules/ui-manager.js
+++ b/frontend/public/js/auth/modules/ui-manager.js
@@ -1,3 +1,5 @@
+import logger from "../../logger.js";
+
 class AuthUIManager {
   constructor() {
     this.messageContainer = null;
@@ -6,7 +8,7 @@ class AuthUIManager {
 
   // Mostrar mensaje al usuario
   showMessage(message, type = "info", duration = 5000) {
-    console.log(`üì¢ AuthUIManager - Mostrando mensaje: ${message} (${type})`);
+    logger.info(`üì¢ AuthUIManager - Mostrando mensaje: ${message} (${type})`);
 
     // Limpiar mensajes anteriores
     this.clearMessages();
@@ -211,7 +213,7 @@ class AuthUIManager {
 
   // Redireccionar despu√©s del login exitoso
   redirectAfterLogin(userRole, defaultUrl = "/") {
-    console.log(`üîÑ AuthUIManager - Redirigiendo usuario ${userRole}...`);
+    logger.info(`üîÑ AuthUIManager - Redirigiendo usuario ${userRole}...`);
 
     // Determinar URL de redirecci√≥n basada en el rol
     let redirectUrl = defaultUrl;
@@ -245,7 +247,7 @@ class AuthUIManager {
 
   // Redireccionar despu√©s del registro exitoso
   redirectAfterRegister() {
-    console.log(`üîÑ AuthUIManager - Redirigiendo despu√©s del registro...`);
+    logger.info(`üîÑ AuthUIManager - Redirigiendo despu√©s del registro...`);
 
     this.showSuccess("¬°Registro exitoso! Redirigiendo al login...", 2000);
 
diff --git a/frontend/public/js/auth/modules/validation-manager.js b/frontend/public/js/auth/modules/validation-manager.js
index a6af9c3..572e904 100644
--- a/frontend/public/js/auth/modules/validation-manager.js
+++ b/frontend/public/js/auth/modules/validation-manager.js
@@ -1,3 +1,5 @@
+import logger from '../../logger.js';
+
 class AuthValidationManager {
   constructor() {
     this.validationRules = {
@@ -351,9 +353,7 @@ class AuthValidationManager {
     const form = document.getElementById(formId);
     if (!form) return;
 
-    console.log(
-      `üîß AuthValidationManager - Configurando validaci√≥n para ${formId}`
-    );
+    logger.debug(`üîß AuthValidationManager - Configurando validaci√≥n para ${formId}`);
 
     // Configurar validaci√≥n para cada campo
     Object.keys(this.validationRules).forEach((fieldName) => {
@@ -593,7 +593,7 @@ class AuthValidationManager {
     // Mostrar errores si los hay
     if (!validation.isValid) {
       validation.errors.forEach((error) => {
-        console.error("Validation error:", error);
+        logger.error("Validation error:", error);
       });
       isValid = false;
     }
@@ -601,7 +601,7 @@ class AuthValidationManager {
     // Mostrar advertencias si las hay
     if (validation.warnings && validation.warnings.length > 0) {
       validation.warnings.forEach((warning) => {
-        console.warn("Validation warning:", warning);
+        logger.warn("Validation warning:", warning);
       });
     }
 
@@ -637,7 +637,7 @@ class AuthValidationManager {
 
   // M√©todo para inicializar la validaci√≥n
   init(formId) {
-    console.log("üöÄ AuthValidationManager - Inicializando validaci√≥n");
+  logger.debug("üöÄ AuthValidationManager - Inicializando validaci√≥n");
 
     // Configurar validaci√≥n en tiempo real
     this.setupRealTimeValidation(formId);
@@ -646,9 +646,7 @@ class AuthValidationManager {
     const form = document.getElementById(formId);
     this.clearAllValidation(form);
 
-    console.log(
-      "‚úÖ AuthValidationManager - Validaci√≥n configurada correctamente"
-    );
+    logger.debug("‚úÖ AuthValidationManager - Validaci√≥n configurada correctamente");
   }
 
   // Obtener sugerencias de seguridad
diff --git a/frontend/public/js/auth/register-controller.js b/frontend/public/js/auth/register-controller.js
index 1a1d53b..e9bd4a2 100644
--- a/frontend/public/js/auth/register-controller.js
+++ b/frontend/public/js/auth/register-controller.js
@@ -1,22 +1,24 @@
+import logger from "../logger.js";
+
 // Controlador de registro principal
 document.addEventListener("DOMContentLoaded", function () {
-  console.log("üöÄ Inicializando controlador de registro...");
+  logger.debug("Inicializando controlador de registro...");
 
   // Inicializar validaci√≥n del formulario
   initializeFormValidation();
 
-  console.log("üéâ Controlador de registro listo");
+  logger.info("Controlador de registro listo");
 });
 
 // Inicializar validaci√≥n del formulario
 function initializeFormValidation() {
-  console.log("üîß Configurando validaci√≥n del formulario de registro...");
+  logger.debug("Configurando validaci√≥n del formulario de registro...");
 
   // Configurar manejo del env√≠o del formulario
   const form = document.getElementById("registerForm");
   if (form) {
     form.addEventListener("submit", handleFormSubmit);
-    console.log("‚úÖ Event listener de env√≠o configurado");
+  logger.info("Event listener de env√≠o configurado");
 
     // Validaci√≥n en tiempo real para email
     const emailInput = form.querySelector('[name="email"]');
@@ -60,19 +62,19 @@ function initializeFormValidation() {
       });
     }
   } else {
-    console.error("‚ùå No se encontr√≥ el formulario de registro");
+    logger.error("‚ùå No se encontr√≥ el formulario de registro");
     return;
   }
 
   // Configurar validaci√≥n en tiempo real para confirmaci√≥n de contrase√±a
   setupPasswordConfirmationValidation();
 
-  console.log("‚úÖ Validaci√≥n del formulario configurada");
+  logger.info("Validaci√≥n del formulario configurada");
 }
 
 // Manejar env√≠o del formulario
 async function handleFormSubmit(event) {
-  console.log("üîç Procesando env√≠o del formulario...");
+  logger.debug("Procesando env√≠o del formulario...");
 
   // Prevenir env√≠o por defecto
   event.preventDefault();
@@ -82,16 +84,7 @@ async function handleFormSubmit(event) {
     const formData = new FormData(event.target);
     const userData = Object.fromEntries(formData.entries());
 
-    console.log("üìã Datos capturados del formulario:");
-    console.log("- firstName:", userData.firstName);
-    console.log("- lastName:", userData.lastName);
-    console.log("- email:", userData.email);
-    console.log("- cardIdentity:", userData.cardIdentity);
-    console.log("- street:", userData.street);
-    console.log("- number:", userData.number);
-    console.log("- location:", userData.location);
-    console.log("- province:", userData.province);
-    console.log("- Objeto completo:", userData);
+  logger.debug("Datos capturados del formulario:", userData);
 
     // Validar email y cardIdentity en el backend antes de registrar
     const emailExists = await window.AuthAPI.checkEmailExists(userData.email);
@@ -107,7 +100,7 @@ async function handleFormSubmit(event) {
 
     await processRegistration(userData);
   } catch (error) {
-    console.error("‚ùå Error al procesar registro:", error);
+    logger.error("‚ùå Error al procesar registro:", error);
     alert("Error al procesar el registro. Int√©ntelo nuevamente.");
   }
 }
@@ -163,11 +156,12 @@ async function processRegistration(userData) {
       mappedData.location = userData.location || "";
       mappedData.province = userData.province || "";
 
-      console.log("üè† Direcci√≥n enviada como campos primitivos:");
-      console.log("- street:", mappedData.street);
-      console.log("- number:", mappedData.number);
-      console.log("- location:", mappedData.location);
-      console.log("- province:", mappedData.province);
+      logger.debug("Direcci√≥n enviada como campos primitivos:", {
+        street: mappedData.street,
+        number: mappedData.number,
+        location: mappedData.location,
+        province: mappedData.province,
+      });
     }
 
     // Mostrar indicador de carga
@@ -204,14 +198,14 @@ async function processRegistration(userData) {
       submitButton.textContent = originalText;
     }
   } catch (error) {
-    console.error("‚ùå Error al procesar registro:", error);
+    logger.error("‚ùå Error al procesar registro:", error);
     alert("Error al registrar usuario. Int√©ntelo nuevamente.");
   }
 }
 
 // Mapear datos del formulario al formato esperado por el backend
 function mapFormDataToBackendFormat(formData) {
-  console.log("üìã Datos originales del formulario:", formData);
+  logger.debug("Datos originales del formulario:", formData);
 
   const mappedData = {
     firstName: formData.firstName,
@@ -235,7 +229,7 @@ function mapFormDataToBackendFormat(formData) {
     formData.number ||
     formData.location ||
     formData.province;
-  console.log("üè† Verificando datos de direcci√≥n:", {
+  logger.debug("Verificando datos de direcci√≥n:", {
     street: formData.street,
     number: formData.number,
     location: formData.location,
@@ -250,17 +244,17 @@ function mapFormDataToBackendFormat(formData) {
     mappedData.location = formData.location || "";
     mappedData.province = formData.province || "";
 
-    console.log("‚úÖ Direcci√≥n mapeada como campos primitivos:", {
+    logger.info("Direcci√≥n mapeada como campos primitivos:", {
       street: mappedData.street,
       number: mappedData.number,
       location: mappedData.location,
       province: mappedData.province,
     });
   } else {
-    console.log("‚ö†Ô∏è No se encontraron datos de direcci√≥n");
+    logger.warn("‚ö†Ô∏è No se encontraron datos de direcci√≥n");
   }
 
-  console.log("üìã Datos finales mapeados:", mappedData);
+  logger.debug("üìã Datos finales mapeados:", mappedData);
   return mappedData;
 }
 
@@ -272,28 +266,28 @@ function setupPasswordConfirmationValidation() {
   );
 
   if (!passwordField || !confirmPasswordField) {
-    console.log("‚ö†Ô∏è Campos de contrase√±a no encontrados");
+    logger.warn("‚ö†Ô∏è Campos de contrase√±a no encontrados");
     return;
   }
 
-  console.log("üîß Configurando eventos para validaci√≥n de contrase√±as...");
+  logger.debug("üîß Configurando eventos para validaci√≥n de contrase√±as...");
 
   // Validar cuando el usuario escribe en confirmPassword
-  confirmPasswordField.addEventListener("input", function () {
-    console.log("üîç Validando confirmaci√≥n de contrase√±a...");
+    confirmPasswordField.addEventListener("input", function () {
+    logger.debug("üîç Validando confirmaci√≥n de contrase√±a...");
     validatePasswordConfirmation();
   });
 
   // Validar cuando el usuario escribe en password (para actualizar confirmPassword)
-  passwordField.addEventListener("input", function () {
+      passwordField.addEventListener("input", function () {
     // Solo validar si confirmPassword ya tiene contenido
     if (confirmPasswordField.value) {
-      console.log("üîç Revalidando confirmaci√≥n por cambio en password...");
+      logger.debug("üîç Revalidando confirmaci√≥n por cambio en password...");
       validatePasswordConfirmation();
     }
   });
 
-  console.log("‚úÖ Validaci√≥n en tiempo real de contrase√±as configurada");
+  logger.info("‚úÖ Validaci√≥n en tiempo real de contrase√±as configurada");
 }
 
 // Funci√≥n para validar coincidencia de contrase√±as
@@ -305,7 +299,7 @@ function validatePasswordConfirmation() {
   const errorContainer = document.getElementById("confirmPassword-error");
 
   if (!passwordField || !confirmPasswordField || !errorContainer) {
-    console.log(
+    logger.warn(
       "‚ö†Ô∏è No se encontraron elementos para validaci√≥n de contrase√±as"
     );
     return false;
@@ -314,13 +308,13 @@ function validatePasswordConfirmation() {
   const password = passwordField.value;
   const confirmPassword = confirmPasswordField.value;
 
-  console.log(
+  logger.debug(
     `üîç Validando contrase√±as: password='${password}', confirmPassword='${confirmPassword}'`
   );
 
   if (confirmPassword && password !== confirmPassword) {
     // Las contrase√±as no coinciden
-    console.log("‚ùå Las contrase√±as no coinciden");
+  logger.warn("‚ùå Las contrase√±as no coinciden");
     errorContainer.textContent = "Las contrase√±as no coinciden";
     errorContainer.style.display = "block";
     confirmPasswordField.classList.add("is-invalid");
@@ -328,7 +322,7 @@ function validatePasswordConfirmation() {
     return false;
   } else if (confirmPassword && password === confirmPassword) {
     // Las contrase√±as coinciden
-    console.log("‚úÖ Las contrase√±as coinciden");
+  logger.info("‚úÖ Las contrase√±as coinciden");
     errorContainer.textContent = "";
     errorContainer.style.display = "none";
     confirmPasswordField.classList.remove("is-invalid");
@@ -336,7 +330,7 @@ function validatePasswordConfirmation() {
     return true;
   } else {
     // Campo vac√≠o, limpiar estados
-    console.log("üîÑ Campo de confirmaci√≥n vac√≠o, limpiando estados");
+    logger.debug("üîÑ Campo de confirmaci√≥n vac√≠o, limpiando estados");
     errorContainer.textContent = "";
     errorContainer.style.display = "none";
     confirmPasswordField.classList.remove("is-invalid", "is-valid");
diff --git a/frontend/public/js/dashboard/dashboard-controller.js b/frontend/public/js/dashboard/dashboard-controller.js
index a993703..c031572 100644
--- a/frontend/public/js/dashboard/dashboard-controller.js
+++ b/frontend/public/js/dashboard/dashboard-controller.js
@@ -1,5 +1,7 @@
+import logger from "../logger.js";
 import DashboardAPI from "./dashboard-api.js";
 import AppointmentAPI from "../api/appointment-api.js";
+import { parseYMDToLocalDate, formatLocalDate } from "../utils/date-utils.js";
 
 // Controlador principal del dashboard
 class DashboardController {
@@ -12,7 +14,7 @@ class DashboardController {
   // Inicializar el dashboard cuando el DOM est√© listo
   async init() {
     try {
-      console.log("üìä Inicializando Dashboard...");
+  logger.debug("Inicializando Dashboard...");
 
   // Mostrar fecha actual
       this.updateCurrentDate();
@@ -27,7 +29,7 @@ class DashboardController {
   // Adjuntar controles (botones) una vez inicializado
       this.attachControls();
 
-      console.log("‚úÖ Dashboard inicializado correctamente");
+  logger.info("Dashboard inicializado correctamente");
     } catch (error) {
       console.error("‚ùå Error al inicializar dashboard:", error);
       this.showError(
@@ -294,10 +296,12 @@ class DashboardController {
             <small class="badge bg-light text-dark">
               <i class="bi bi-clock me-1"></i>${appointment.time}
             </small>
-            <small class="badge bg-primary ms-1">
-              <i class="bi bi-calendar3 me-1"></i>${new Date(
-                appointment.date
-              ).toLocaleDateString('es-ES')}
+              <small class="badge bg-primary ms-1">
+              <i class="bi bi-calendar3 me-1"></i>${(() => {
+                const ds = appointment.date;
+                if (!ds) return "";
+                return formatLocalDate(ds);
+              })()}
             </small>
             <small class="badge ms-1 ${statusClass} text-white appointment-status">${statusLabel}</small>
           </div>
@@ -470,7 +474,7 @@ class DashboardController {
   async refreshDashboard() {
     if (this.isLoading) return;
     this.isLoading = true;
-    console.log("üîÑ Refrescando dashboard...");
+  logger.debug("Refrescando dashboard...");
     try {
       await this.loadStats();
       // actualizar gr√°fico
@@ -590,4 +594,4 @@ document.addEventListener("DOMContentLoaded", async () => {
   window.dashboardController = dashboardController;
 });
 
-console.log("üìä Dashboard Controller cargado correctamente");
+  logger.info("Dashboard Controller cargado correctamente");
diff --git a/frontend/public/js/debug-register.js b/frontend/public/js/debug-register.js
index 153b928..22f72b5 100644
--- a/frontend/public/js/debug-register.js
+++ b/frontend/public/js/debug-register.js
@@ -1,54 +1,8 @@
-// Script de debug para verificar el funcionamiento del registro
-console.log("üîç Debug script cargado");
+// Archivo archivado: la versi√≥n activa del debug-register fue movida a
+// `frontend/public/js/debug-scripts/debug-register.js` para evitar servirlo en producci√≥n.
+// Contenido original preservado en la carpeta debug-scripts.
 
-document.addEventListener("DOMContentLoaded", function() {
-  console.log("üîç DOM listo para debug");
-  
-  // Verificar que los elementos existen
-  const passwordField = document.querySelector('[name="password"]');
-  const confirmPasswordField = document.querySelector('[name="confirmPassword"]');
-  const errorContainer = document.getElementById('confirmPassword-error');
-  
-  console.log("üîç Elementos encontrados:", {
-    passwordField: !!passwordField,
-    confirmPasswordField: !!confirmPasswordField,
-    errorContainer: !!errorContainer
-  });
-  
-  if (passwordField && confirmPasswordField && errorContainer) {
-    console.log("‚úÖ Todos los elementos est√°n presentes");
-    
-    // Agregar event listeners de prueba
-    confirmPasswordField.addEventListener('input', function() {
-      console.log("üîç DEBUG: Input en confirmPassword:", this.value);
-      const password = passwordField.value;
-      const confirmPassword = this.value;
-      
-      if (confirmPassword && password !== confirmPassword) {
-        console.log("‚ùå DEBUG: Contrase√±as no coinciden");
-        errorContainer.textContent = 'Las contrase√±as no coinciden';
-        errorContainer.style.display = 'block';
-        this.classList.add('is-invalid');
-        this.classList.remove('is-valid');
-      } else if (confirmPassword && password === confirmPassword) {
-        console.log("‚úÖ DEBUG: Contrase√±as coinciden");
-        errorContainer.textContent = '';
-        errorContainer.style.display = 'none';
-        this.classList.remove('is-invalid');
-        this.classList.add('is-valid');
-      }
-    });
-    
-    passwordField.addEventListener('input', function() {
-      console.log("üîç DEBUG: Input en password:", this.value);
-      if (confirmPasswordField.value) {
-        // Trigger validation on confirm field
-        confirmPasswordField.dispatchEvent(new Event('input'));
-      }
-    });
-    
-    console.log("‚úÖ Event listeners de debug agregados");
-  } else {
-    console.log("‚ùå Faltan elementos");
-  }
-});
+// No-op export para compatibilidad en caso de import accidental.
+export default function __debug_register_archived__() {
+  // debug-register archivado
+}
diff --git a/frontend/public/js/debug-scripts/debug-auth.js b/frontend/public/js/debug-scripts/debug-auth.js
new file mode 100644
index 0000000..232fdf8
--- /dev/null
+++ b/frontend/public/js/debug-scripts/debug-auth.js
@@ -0,0 +1,5 @@
+// Archivo de debug para autenticaci√≥n preservado fuera de la carga p√∫blica.
+console.log('[debug-auth] preservado en debug-scripts');
+// Archivo movido desde public/js para evitar que se cargue por defecto.
+// Contenido original preservado para depuraci√≥n manual si es necesario.
+console.log("[debug-auth] script preservado en debug-scripts");
diff --git a/frontend/public/js/debug-scripts/debug-register.js b/frontend/public/js/debug-scripts/debug-register.js
new file mode 100644
index 0000000..5510e8a
--- /dev/null
+++ b/frontend/public/js/debug-scripts/debug-register.js
@@ -0,0 +1,3 @@
+// Archivo movido desde public/js para evitar que se cargue por defecto.
+// Contenido original preservado para depuraci√≥n manual si es necesario.
+console.log("[debug-register] script preservado en debug-scripts");
diff --git a/frontend/public/js/debug-scripts/test-connection.js b/frontend/public/js/debug-scripts/test-connection.js
new file mode 100644
index 0000000..e4811cf
--- /dev/null
+++ b/frontend/public/js/debug-scripts/test-connection.js
@@ -0,0 +1,4 @@
+// Script de pruebas movido fuera de la carga p√∫blica
+// ORIGINAL: herramientas de diagn√≥stico para desarrollo local
+// Preservado para uso manual.
+// ...existing code...
diff --git a/frontend/public/js/debug-scripts/test-register.js b/frontend/public/js/debug-scripts/test-register.js
new file mode 100644
index 0000000..24022d0
--- /dev/null
+++ b/frontend/public/js/debug-scripts/test-register.js
@@ -0,0 +1,4 @@
+// Script de pruebas movido fuera de la carga p√∫blica
+// ORIGINAL: diagn√≥stico de registro para testing manual
+// Preservado para uso manual.
+// ...existing code...
diff --git a/frontend/public/js/dentist/dentist-add-controller.js b/frontend/public/js/dentist/dentist-add-controller.js
index 5376e61..211c986 100644
--- a/frontend/public/js/dentist/dentist-add-controller.js
+++ b/frontend/public/js/dentist/dentist-add-controller.js
@@ -1,5 +1,6 @@
 // Importar el controlador modular de dentistas
 import DentistController from "./modules/index.js";
+import logger from "../logger.js";
 
 // Variables globales del controlador
 let dentistController;
@@ -7,13 +8,13 @@ let isInitialized = false;
 
 // Inicializaci√≥n cuando el DOM est√° listo
 document.addEventListener("DOMContentLoaded", async () => {
-  console.log("‚ûï Inicializando controlador de agregar dentista modular...");
+  logger.info("‚ûï Inicializando controlador de agregar dentista modular...");
 
   try {
     // Verificar si el DentistController global ya est√° disponible
     if (window.dentistController) {
       dentistController = window.dentistController;
-      console.log("‚úÖ Usando DentistController global existente");
+  logger.info("‚úÖ Usando DentistController global existente");
     } else {
       // Crear instancia local del controlador modular
       dentistController = new DentistController();
@@ -21,7 +22,7 @@ document.addEventListener("DOMContentLoaded", async () => {
 
       // Hacer disponible globalmente
       window.dentistController = dentistController;
-      console.log("‚úÖ DentistController modular inicializado");
+  logger.info("‚úÖ DentistController modular inicializado");
     }
 
     isInitialized = true;
@@ -32,9 +33,9 @@ document.addEventListener("DOMContentLoaded", async () => {
     // Configurar formulario espec√≠fico de agregar
     setupAddForm();
 
-    console.log("üéâ Controlador de agregar dentista modular listo");
+  logger.info("üéâ Controlador de agregar dentista modular listo");
   } catch (error) {
-    console.error(
+    logger.error(
       "‚ùå Error al inicializar controlador de agregar dentista:",
       error
     );
@@ -89,7 +90,7 @@ function setupGlobalFunctions() {
       const validation =
         dentistController.validationManager.validateDentistData(data);
 
-      console.log("üëÄ Vista previa de datos del dentista:", {
+      logger.debug("üëÄ Vista previa de datos del dentista:", {
         data: data,
         validation: validation,
       });
@@ -99,7 +100,7 @@ function setupGlobalFunctions() {
     return null;
   };
 
-  console.log("‚úÖ Funciones globales de agregar configuradas");
+  logger.info("‚úÖ Funciones globales de agregar configuradas");
 }
 
 // Configurar formulario espec√≠fico de agregar
@@ -144,7 +145,7 @@ function setupAddForm() {
   // Configurar ayuda contextual
   setupContextualHelp(addForm);
 
-  console.log("‚úÖ Formulario de agregar configurado");
+  logger.info("Formulario de agregar configurado");
 }
 
 // Configurar auto-guardado en localStorage
@@ -349,6 +350,6 @@ window.debugDentistAddController = function () {
 // Exportar para uso en m√≥dulos
 export default dentistController;
 
-console.log(
+logger.debug(
   "‚ûï Controlador de agregar dentista modular cargado - Debugging: window.debugDentistAddController()"
 );
diff --git a/frontend/public/js/dentist/dentist-controller.js b/frontend/public/js/dentist/dentist-controller.js
index c56ba52..32d13ed 100644
--- a/frontend/public/js/dentist/dentist-controller.js
+++ b/frontend/public/js/dentist/dentist-controller.js
@@ -1,5 +1,6 @@
 // Importar el controlador modular de dentistas
 import DentistController from "./modules/index.js";
+import logger from "../logger.js";
 
 // Variables globales del controlador
 let dentistController;
@@ -7,13 +8,13 @@ let isInitialized = false;
 
 // Inicializaci√≥n cuando el DOM est√° listo
 document.addEventListener("DOMContentLoaded", async () => {
-  console.log("ü¶∑ Inicializando controlador de dentistas modular...");
+  logger.info("ü¶∑ Inicializando controlador de dentistas modular...");
 
   try {
     // Verificar si el DentistController global ya est√° disponible
     if (window.dentistController) {
       dentistController = window.dentistController;
-      console.log("‚úÖ Usando DentistController global existente");
+  logger.info("‚úÖ Usando DentistController global existente");
     } else {
       // Crear instancia local del controlador modular
       dentistController = new DentistController();
@@ -21,7 +22,7 @@ document.addEventListener("DOMContentLoaded", async () => {
 
       // Hacer disponible globalmente
       window.dentistController = dentistController;
-      console.log("‚úÖ DentistController modular inicializado");
+  logger.info("‚úÖ DentistController modular inicializado");
     }
 
     isInitialized = true;
@@ -32,9 +33,9 @@ document.addEventListener("DOMContentLoaded", async () => {
     // Configurar eventos globales
     setupGlobalEvents();
 
-    console.log("üéâ Controlador de dentistas modular listo");
+  logger.info("üéâ Controlador de dentistas modular listo");
   } catch (error) {
-    console.error("‚ùå Error al inicializar controlador de dentistas:", error);
+    logger.error("‚ùå Error al inicializar controlador de dentistas:", error);
     showErrorMessage(
       "Error al cargar el sistema de dentistas. Por favor, recargue la p√°gina."
     );
@@ -138,7 +139,7 @@ function setupGlobalFunctions() {
   window.clearDentistCache = function () {
     if (dentistController && dentistController.dataManager) {
       dentistController.dataManager.clearCache();
-      console.log("üßπ Cache de dentistas limpiado");
+      logger.info("üßπ Cache de dentistas limpiado");
     }
   };
 
@@ -147,11 +148,10 @@ function setupGlobalFunctions() {
       dentistController.formManager.clearAllForms();
       dentistController.uiManager.clearMessages();
       dentistController.uiManager.toggleUpdateSection(false);
-      console.log("üîÑ UI de dentistas resetada");
+      logger.info("üîÑ UI de dentistas resetata");
     }
   };
-
-  console.log("‚úÖ Funciones globales configuradas");
+  logger.info("‚úÖ Funciones globales configuradas");
 }
 
 // Configurar eventos globales
@@ -202,12 +202,12 @@ function setupGlobalEvents() {
     if (!document.hidden && dentistController) {
       // Revalidar datos cuando la p√°gina vuelve a ser visible
       if (dentistController.currentPage === "list") {
-        console.log("üëÅÔ∏è P√°gina visible - validando datos");
+        logger.info("üëÅÔ∏è P√°gina visible - validando datos");
         // Opcional: refrescar datos si han pasado m√°s de 5 minutos
         const lastUpdate =
           dentistController.dataManager.cache?.get("all-dentists")?.timestamp;
         if (lastUpdate && Date.now() - lastUpdate > 5 * 60 * 1000) {
-          console.log("üîÑ Refrescando datos por tiempo transcurrido");
+          logger.info("üîÑ Refrescando datos por tiempo transcurrido");
           window.refreshDentists();
         }
       }
@@ -222,7 +222,7 @@ function setupGlobalEvents() {
     }
   });
 
-  console.log("‚úÖ Eventos globales configurados");
+  logger.info("Eventos globales configurados");
 }
 
 // Configurar notificaciones en tiempo real (simulado)
@@ -380,6 +380,6 @@ window.debugDentistController = function () {
 // Exportar para uso en m√≥dulos
 export default dentistController;
 
-console.log(
+logger.debug(
   "ü¶∑ Controlador de dentistas modular cargado - Debugging: window.debugDentistController()"
 );
diff --git a/frontend/public/js/dentist/dentist-edit-controller.js b/frontend/public/js/dentist/dentist-edit-controller.js
index 5ed82a4..4acfe8d 100644
--- a/frontend/public/js/dentist/dentist-edit-controller.js
+++ b/frontend/public/js/dentist/dentist-edit-controller.js
@@ -1,5 +1,6 @@
 // Importar el controlador modular de dentistas
 import DentistController from "./modules/index.js";
+import logger from "../logger.js";
 
 // Variables globales del controlador
 let dentistController;
@@ -8,17 +9,17 @@ let currentDentistId = null;
 
 // Inicializaci√≥n cuando el DOM est√° listo
 document.addEventListener("DOMContentLoaded", async () => {
-  console.log("‚úèÔ∏è Inicializando controlador de editar dentista modular...");
+  logger.info("‚úèÔ∏è Inicializando controlador de editar dentista modular...");
 
   try {
     // Obtener ID del dentista
-    currentDentistId = getDentistId();
-    console.log(`üîç ID del dentista a editar: ${currentDentistId}`);
+  currentDentistId = getDentistId();
+  logger.debug(`üîç ID del dentista a editar: ${currentDentistId}`);
 
     // Verificar si el DentistController global ya est√° disponible
     if (window.dentistController) {
       dentistController = window.dentistController;
-      console.log("‚úÖ Usando DentistController global existente");
+      logger.info("‚úÖ Usando DentistController global existente");
     } else {
       // Crear instancia local del controlador modular
       dentistController = new DentistController();
@@ -26,7 +27,7 @@ document.addEventListener("DOMContentLoaded", async () => {
 
       // Hacer disponible globalmente
       window.dentistController = dentistController;
-      console.log("‚úÖ DentistController modular inicializado");
+      logger.info("‚úÖ DentistController modular inicializado");
     }
 
     isInitialized = true;
@@ -39,9 +40,9 @@ document.addEventListener("DOMContentLoaded", async () => {
       await loadDentistForEdit(currentDentistId);
     }
 
-    console.log("üéâ Controlador de editar dentista modular listo");
+    logger.info("üéâ Controlador de editar dentista modular listo");
   } catch (error) {
-    console.error(
+    logger.error(
       "‚ùå Error al inicializar controlador de editar dentista:",
       error
     );
@@ -85,7 +86,7 @@ function getDentistId() {
 // Cargar datos del dentista para edici√≥n
 async function loadDentistForEdit(dentistId) {
   try {
-    console.log(`üìã Cargando dentista ${dentistId} para edici√≥n...`);
+  logger.info(`üìã Cargando dentista ${dentistId} para edici√≥n...`);
 
     showMessage("Cargando datos del dentista...", "info");
 
@@ -96,10 +97,10 @@ async function loadDentistForEdit(dentistId) {
 
     showMessage("Datos cargados correctamente", "success", 2000);
 
-    console.log("‚úÖ Dentista cargado para edici√≥n:", dentist);
+  logger.info("‚úÖ Dentista cargado para edici√≥n:", dentist);
     return dentist;
   } catch (error) {
-    console.error(`‚ùå Error al cargar dentista ${dentistId}:`, error);
+  logger.error(`‚ùå Error al cargar dentista ${dentistId}:`, error);
     showErrorMessage(
       `Error al cargar los datos del dentista: ${error.message}`
     );
@@ -194,7 +195,7 @@ function setupGlobalFunctions() {
     return false;
   };
 
-  console.log("‚úÖ Funciones globales de edici√≥n configuradas");
+  logger.info("‚úÖ Funciones globales de edici√≥n configuradas");
 }
 
 // Configurar advertencia antes de salir si hay cambios no guardados
@@ -338,6 +339,6 @@ window.debugDentistEditController = function () {
 // Exportar para uso en m√≥dulos
 export default dentistController;
 
-console.log(
+logger.debug(
   "‚úèÔ∏è Controlador de editar dentista modular cargado - Debugging: window.debugDentistEditController()"
 );
diff --git a/frontend/public/js/dentist/dentist-list-controller.js b/frontend/public/js/dentist/dentist-list-controller.js
index ef630b1..dc52d51 100644
--- a/frontend/public/js/dentist/dentist-list-controller.js
+++ b/frontend/public/js/dentist/dentist-list-controller.js
@@ -1,5 +1,6 @@
 // Importar el controlador modular de dentistas
 import DentistController from "./modules/index.js";
+import logger from "../logger.js";
 
 // Variables globales del controlador
 let dentistController;
@@ -7,13 +8,13 @@ let isInitialized = false;
 
 // Inicializaci√≥n cuando el DOM est√° listo
 document.addEventListener("DOMContentLoaded", async () => {
-  console.log("üìã Inicializando controlador de lista de dentistas modular...");
+  logger.info("üìã Inicializando controlador de lista de dentistas modular...");
 
   try {
     // Verificar si el DentistController global ya est√° disponible
     if (window.dentistController) {
       dentistController = window.dentistController;
-      console.log("‚úÖ Usando DentistController global existente");
+  logger.info("‚úÖ Usando DentistController global existente");
     } else {
       // Crear instancia local del controlador modular
       dentistController = new DentistController();
@@ -21,7 +22,7 @@ document.addEventListener("DOMContentLoaded", async () => {
 
       // Hacer disponible globalmente
       window.dentistController = dentistController;
-      console.log("‚úÖ DentistController modular inicializado");
+  logger.info("‚úÖ DentistController modular inicializado");
     }
 
     isInitialized = true;
@@ -34,9 +35,9 @@ document.addEventListener("DOMContentLoaded", async () => {
       await loadDentistsList();
     }
 
-    console.log("üéâ Controlador de lista de dentistas modular listo");
+  logger.info("üéâ Controlador de lista de dentistas modular listo");
   } catch (error) {
-    console.error(
+    logger.error(
       "‚ùå Error al inicializar controlador de lista de dentistas:",
       error
     );
@@ -123,11 +124,11 @@ function setupGlobalFunctions() {
   // Funci√≥n global para refrescar tabla
   window.refreshDentistsTable = async function () {
     try {
-      console.log("üîÑ Refrescando tabla de dentistas...");
+      logger.info("üîÑ Refrescando tabla de dentistas...");
       await loadDentistsList();
       showInfoMessage("Lista actualizada", 2000);
     } catch (error) {
-      console.error("‚ùå Error al refrescar:", error);
+      logger.error("‚ùå Error al refrescar:", error);
       showErrorMessage("Error al actualizar la lista");
     }
   };
@@ -137,22 +138,22 @@ function setupGlobalFunctions() {
     setupAdvancedFiltering();
   };
 
-  console.log("‚úÖ Funciones globales de lista configuradas");
+  logger.info("‚úÖ Funciones globales de lista configuradas");
 }
 
 // Funci√≥n auxiliar para cargar lista
 async function loadDentistsList() {
   try {
-    console.log("üìä Cargando lista de dentistas...");
+    logger.info("üìä Cargando lista de dentistas...");
     const dentists = await dentistController.loadList();
 
     // Configurar eventos de tabla despu√©s de cargar
     setupTableEvents();
 
-    console.log(`‚úÖ ${dentists.length} dentistas cargados`);
+    logger.info(`‚úÖ ${dentists.length} dentistas cargados`);
     return dentists;
   } catch (error) {
-    console.error("‚ùå Error al cargar lista:", error);
+    logger.error("‚ùå Error al cargar lista:", error);
     showErrorMessage("Error al cargar la lista de dentistas");
     throw error;
   }
@@ -231,7 +232,7 @@ function sortTable(field) {
   // Guardar estado de ordenamiento
   window.currentSort = { field, direction };
 
-  console.log(`üìä Tabla ordenada por ${field} (${direction})`);
+  logger.debug(`Tabla ordenada por ${field} (${direction})`);
 }
 
 // Actualizar indicadores de ordenamiento
@@ -457,6 +458,6 @@ window.debugDentistListController = function () {
 // Exportar para uso en m√≥dulos
 export default dentistController;
 
-console.log(
+logger.debug(
   "üìã Controlador de lista de dentistas modular cargado - Debugging: window.debugDentistListController()"
 );
diff --git a/frontend/public/js/dentist/modules/data-manager.js b/frontend/public/js/dentist/modules/data-manager.js
index 7626acb..642902d 100644
--- a/frontend/public/js/dentist/modules/data-manager.js
+++ b/frontend/public/js/dentist/modules/data-manager.js
@@ -1,4 +1,5 @@
 import DentistAPI from "../../api/dentist-api.js";
+import logger from "../../logger.js";
 
 class DentistDataManager {
   constructor() {
@@ -10,13 +11,13 @@ class DentistDataManager {
   // Cargar todos los dentistas
   async loadAllDentists() {
     try {
-      console.log("üìä DentistDataManager - Cargando lista de dentistas...");
+  logger.info("üìä DentistDataManager - Cargando lista de dentistas...");
 
       // Verificar cache
       const cacheKey = "all-dentists";
       const cached = this.getCachedData(cacheKey);
       if (cached) {
-        console.log("‚úÖ Dentistas cargados desde cache");
+  logger.info("‚úÖ Dentistas cargados desde cache");
         this.dentists = cached;
         return cached;
       }
@@ -25,10 +26,10 @@ class DentistDataManager {
       this.dentists = response;
       this.setCachedData(cacheKey, response);
 
-      console.log(`‚úÖ ${this.dentists.length} dentistas cargados desde API`);
+  logger.info(`‚úÖ ${this.dentists.length} dentistas cargados desde API`);
       return this.dentists;
     } catch (error) {
-      console.error("‚ùå Error al cargar dentistas:", error);
+      logger.error("‚ùå Error al cargar dentistas:", error);
       throw new Error(`Error al cargar dentistas: ${error.message}`);
     }
   }
@@ -36,13 +37,13 @@ class DentistDataManager {
   // Obtener dentista por ID
   async loadDentistById(id) {
     try {
-      console.log(`üîç DentistDataManager - Buscando dentista ID: ${id}`);
+  logger.info(`üîç DentistDataManager - Buscando dentista ID: ${id}`);
 
       // Verificar cache
       const cacheKey = `dentist-${id}`;
       const cached = this.getCachedData(cacheKey);
       if (cached) {
-        console.log("‚úÖ Dentista cargado desde cache");
+  logger.info("‚úÖ Dentista cargado desde cache");
         return cached;
       }
 
@@ -51,7 +52,7 @@ class DentistDataManager {
         const found = this.dentists.find((d) => d.id === parseInt(id));
         if (found) {
           this.setCachedData(cacheKey, found);
-          console.log("‚úÖ Dentista encontrado en lista local");
+          logger.info("‚úÖ Dentista encontrado en lista local");
           return found;
         }
       }
@@ -60,10 +61,10 @@ class DentistDataManager {
       const dentist = await DentistAPI.findById(id);
       this.setCachedData(cacheKey, dentist);
 
-      console.log("‚úÖ Dentista cargado desde API");
+  logger.info("‚úÖ Dentista cargado desde API");
       return dentist;
     } catch (error) {
-      console.error(`‚ùå Error al cargar dentista ${id}:`, error);
+      logger.error(`‚ùå Error al cargar dentista ${id}:`, error);
       throw new Error(`Error al cargar dentista: ${error.message}`);
     }
   }
@@ -71,10 +72,7 @@ class DentistDataManager {
   // Crear nuevo dentista
   async createDentist(dentistData) {
     try {
-      console.log(
-        "‚ûï DentistDataManager - Creando nuevo dentista:",
-        dentistData
-      );
+      logger.info("‚ûï DentistDataManager - Creando nuevo dentista:", dentistData);
 
       const input = dentistData || {};
       const payload = {
@@ -102,10 +100,10 @@ class DentistDataManager {
       this.dentists.push(newDentist);
       this.invalidateCache("all-dentists");
 
-      console.log("‚úÖ Dentista creado exitosamente:", newDentist);
+  logger.info("‚úÖ Dentista creado exitosamente:", newDentist);
       return newDentist;
     } catch (error) {
-      console.error("‚ùå Error al crear dentista:", error);
+      logger.error("‚ùå Error al crear dentista:", error);
       throw new Error(`Error al crear dentista: ${error.message}`);
     }
   }
@@ -113,10 +111,7 @@ class DentistDataManager {
   // Actualizar dentista
   async updateDentist(id, dentistData) {
     try {
-      console.log(
-        `üîÑ DentistDataManager - Actualizando dentista ${id}:`,
-        dentistData
-      );
+      logger.info(`üîÑ DentistDataManager - Actualizando dentista ${id}:`, dentistData);
 
       const updatedDentist = await DentistAPI.update(id, dentistData);
 
@@ -129,10 +124,10 @@ class DentistDataManager {
       this.invalidateCache("all-dentists");
       this.invalidateCache(`dentist-${id}`);
 
-      console.log("‚úÖ Dentista actualizado exitosamente:", updatedDentist);
+  logger.info("‚úÖ Dentista actualizado exitosamente:", updatedDentist);
       return updatedDentist;
     } catch (error) {
-      console.error(`‚ùå Error al actualizar dentista ${id}:`, error);
+      logger.error(`‚ùå Error al actualizar dentista ${id}:`, error);
       throw new Error(`Error al actualizar dentista: ${error.message}`);
     }
   }
@@ -140,7 +135,7 @@ class DentistDataManager {
   // Eliminar dentista
   async deleteDentist(id) {
     try {
-      console.log(`üóëÔ∏è DentistDataManager - Eliminando dentista ${id}`);
+  logger.info(`üóëÔ∏è DentistDataManager - Eliminando dentista ${id}`);
 
       await DentistAPI.delete(id);
 
@@ -149,10 +144,10 @@ class DentistDataManager {
       this.invalidateCache("all-dentists");
       this.invalidateCache(`dentist-${id}`);
 
-      console.log("‚úÖ Dentista eliminado exitosamente");
+  logger.info("‚úÖ Dentista eliminado exitosamente");
       return true;
     } catch (error) {
-      console.error(`‚ùå Error al eliminar dentista ${id}:`, error);
+      logger.error(`‚ùå Error al eliminar dentista ${id}:`, error);
       throw new Error(`Error al eliminar dentista: ${error.message}`);
     }
   }
@@ -244,7 +239,13 @@ class DentistDataManager {
 
     return this.dentists.filter((dentist) => {
       if (!dentist.createdAt) return false;
-      return new Date(dentist.createdAt) > cutoffDate;
+      try {
+        const { parseYMDToLocalDate } = await import("../../utils/date-utils.js");
+        const d = parseYMDToLocalDate(dentist.createdAt) || new Date(dentist.createdAt);
+        return d > cutoffDate;
+      } catch (e) {
+        return new Date(dentist.createdAt) > cutoffDate;
+      }
     });
   }
 
diff --git a/frontend/public/js/dentist/modules/form-manager.js b/frontend/public/js/dentist/modules/form-manager.js
index f3d577f..f4104ec 100644
--- a/frontend/public/js/dentist/modules/form-manager.js
+++ b/frontend/public/js/dentist/modules/form-manager.js
@@ -1,5 +1,6 @@
 import DentistValidationManager from "./validation-manager.js";
 import DentistUIManager from "./ui-manager.js";
+import logger from "../../logger.js";
 
 class DentistFormManager {
   constructor(dataManager = null) {
@@ -12,11 +13,11 @@ class DentistFormManager {
 
   // Inicializar formularios
   init() {
-    console.log("üìù DentistFormManager - Inicializando...");
+    logger.info("üìù DentistFormManager - Inicializando...");
     this.setupForms();
     this.setupValidations();
     this.bindFormEvents();
-    console.log("‚úÖ DentistFormManager - Inicializado correctamente");
+    logger.info("‚úÖ DentistFormManager - Inicializado correctamente");
   }
 
   // Configurar formularios
@@ -24,27 +25,37 @@ class DentistFormManager {
     // Formulario de agregar
     const addForm = document.getElementById("add_new_dentist");
     if (addForm) {
-      console.log("‚úÖ Formulario de agregar encontrado");
+      logger.info("‚úÖ Formulario de agregar encontrado");
     }
 
     // Formulario de actualizar
     const updateForm = document.getElementById("update_dentist_form");
     if (updateForm) {
-      console.log("‚úÖ Formulario de actualizar encontrado");
+      logger.info("‚úÖ Formulario de actualizar encontrado");
     }
 
     // Formulario de editar
     const editForm = document.getElementById("edit_dentist_form");
     if (editForm) {
-      console.log("‚úÖ Formulario de editar encontrado");
+      logger.info("‚úÖ Formulario de editar encontrado");
     }
   }
 
   // Configurar validaciones
   setupValidations() {
-    this.validationManager.setupRealTimeValidation("add_new_dentist");
-    this.validationManager.setupRealTimeValidation("update_dentist_form");
-    this.validationManager.setupRealTimeValidation("edit_dentist_form");
+    const formsToCheck = [
+      "add_new_dentist",
+      "update_dentist_form",
+      "edit_dentist_form",
+    ];
+
+    formsToCheck.forEach((formId) => {
+      if (document.getElementById(formId)) {
+        this.validationManager.setupRealTimeValidation(formId);
+      } else {
+        logger.debug(`Omitiendo configuraci√≥n de validaci√≥n; formulario no presente: ${formId}`);
+      }
+    });
   }
 
   // Enlazar eventos espec√≠ficos de formularios
@@ -60,7 +71,7 @@ class DentistFormManager {
     if (addForm && !addForm.hasAttribute("data-events-bound")) {
       addForm.addEventListener("submit", (e) => this.handleAddSubmit(e));
       addForm.setAttribute("data-events-bound", "true");
-      console.log("‚úÖ Eventos del formulario de agregar configurados");
+      logger.info("‚úÖ Eventos del formulario de agregar configurados");
     }
   }
 
@@ -75,7 +86,7 @@ class DentistFormManager {
       if (form && !form.hasAttribute("data-events-bound")) {
         form.addEventListener("submit", (e) => this.handleEditSubmit(e));
         form.setAttribute("data-events-bound", "true");
-        console.log(`‚úÖ Eventos del formulario ${form.id} configurados`);
+        logger.info(`‚úÖ Eventos del formulario ${form.id} configurados`);
       }
     });
 
@@ -84,7 +95,7 @@ class DentistFormManager {
     if (cancelButton && !cancelButton.hasAttribute("data-events-bound")) {
       cancelButton.addEventListener("click", () => this.cancelEdit());
       cancelButton.setAttribute("data-events-bound", "true");
-      console.log("‚úÖ Bot√≥n cancelar configurado");
+      logger.info("‚úÖ Bot√≥n cancelar configurado");
     }
   }
 
@@ -95,11 +106,11 @@ class DentistFormManager {
       searchInput.addEventListener("input", (e) => {
         if (this.dataManager && this.dataManager.searchDentists) {
           const results = this.dataManager.searchDentists(e.target.value);
-          console.log(`üîç B√∫squeda: ${results.length} dentistas encontrados`);
+          logger.info(`üîç B√∫squeda: ${results.length} dentistas encontrados`);
         }
       });
       searchInput.setAttribute("data-events-bound", "true");
-      console.log("‚úÖ Eventos de b√∫squeda configurados");
+      logger.info("‚úÖ Eventos de b√∫squeda configurados");
     }
   }
 
@@ -108,11 +119,11 @@ class DentistFormManager {
     event.preventDefault();
 
     if (this.isSubmitting) {
-      console.log("‚è≥ Formulario ya se est√° enviando...");
+      logger.info("‚è≥ Formulario ya se est√° enviando...");
       return;
     }
 
-    console.log("üì§ DentistFormManager - Procesando nuevo dentista...");
+    logger.info("üì§ DentistFormManager - Procesando nuevo dentista...");
 
     const form = event.target;
     const submitButton = form.querySelector('button[type="submit"]');
@@ -136,7 +147,7 @@ class DentistFormManager {
       const formData = new FormData(form);
       const dentistData = this.processFormData(formData);
 
-      console.log("üìä Datos del dentista a crear:", dentistData);
+      logger.debug("üìä Datos del dentista a crear:", dentistData);
 
       // Crear dentista
       let result;
@@ -146,7 +157,7 @@ class DentistFormManager {
         throw new Error("DataManager no disponible");
       }
 
-      console.log("‚úÖ Dentista creado exitosamente:", result);
+      logger.info("‚úÖ Dentista creado exitosamente:", result);
 
       // Mostrar mensaje de √©xito
       this.uiManager.showMessage(
@@ -163,7 +174,7 @@ class DentistFormManager {
         window.location.href = "/dentists";
       }, 2000);
     } catch (error) {
-      console.error("‚ùå Error al crear dentista:", error);
+      logger.error("‚ùå Error al crear dentista:", error);
 
       let errorMessage = "Error desconocido";
       if (error.message) {
@@ -187,11 +198,11 @@ class DentistFormManager {
     event.preventDefault();
 
     if (this.isSubmitting) {
-      console.log("‚è≥ Formulario ya se est√° enviando...");
+      logger.info("‚è≥ Formulario ya se est√° enviando...");
       return;
     }
 
-    console.log("üîÑ DentistFormManager - Actualizando dentista...");
+    logger.info("üîÑ DentistFormManager - Actualizando dentista...");
 
     const form = event.target;
     const submitButton = form.querySelector('button[type="submit"]');
@@ -222,7 +233,7 @@ class DentistFormManager {
       const dentistData = this.processFormData(formData);
       dentistData.id = parseInt(dentistId);
 
-      console.log("üìä Datos del dentista a actualizar:", dentistData);
+      logger.debug("üìä Datos del dentista a actualizar:", dentistData);
 
       // Actualizar dentista
       let result;
@@ -232,7 +243,7 @@ class DentistFormManager {
         throw new Error("DataManager no disponible");
       }
 
-      console.log("‚úÖ Dentista actualizado exitosamente:", result);
+      logger.info("‚úÖ Dentista actualizado exitosamente:", result);
 
       // Mostrar mensaje de √©xito
       this.uiManager.showMessage(
@@ -254,7 +265,7 @@ class DentistFormManager {
         }, 1000);
       }
     } catch (error) {
-      console.error("‚ùå Error al actualizar dentista:", error);
+      logger.error("‚ùå Error al actualizar dentista:", error);
 
       let errorMessage = "Error desconocido";
       if (error.message) {
@@ -352,9 +363,7 @@ class DentistFormManager {
   // Cargar datos en formulario de edici√≥n
   async loadDentistForEdit(dentistId) {
     try {
-      console.log(
-        `üìã DentistFormManager - Cargando dentista ${dentistId} para editar`
-      );
+      logger.info(`üìã DentistFormManager - Cargando dentista ${dentistId} para editar`);
 
       this.uiManager.showMessage("Cargando datos del dentista...", "info");
 
@@ -368,7 +377,7 @@ class DentistFormManager {
         throw new Error("DataManager no disponible");
       }
 
-      console.log("‚úÖ Dentista cargado para editar:", dentist);
+      logger.info("‚úÖ Dentista cargado para editar:", dentist);
 
       // Llenar formulario de edici√≥n
       this.uiManager.fillForm(dentist, "edit");
@@ -381,19 +390,19 @@ class DentistFormManager {
 
       return dentist;
     } catch (error) {
-      console.error(`‚ùå Error al cargar dentista ${dentistId}:`, error);
-      this.uiManager.showMessage(
-        `Error al cargar los datos del dentista: ${error.message}`,
-        "danger"
-      );
-      throw error;
-    }
-  }
+      logger.error(`‚ùå Error al cargar dentista ${dentistId}:`, error);
+       this.uiManager.showMessage(
+         `Error al cargar los datos del dentista: ${error.message}`,
+         "danger"
+       );
+       throw error;
+     }
+   }
 
   // Preparar formulario para actualizaci√≥n (llamado desde botones de la lista)
   async prepareUpdateForm(dentist) {
     try {
-      console.log(
+      logger.info(
         "üìù DentistFormManager - Preparando formulario de actualizaci√≥n"
       );
 
@@ -408,9 +417,9 @@ class DentistFormManager {
       // Limpiar validaciones previas
       this.validationManager.clearFormValidation("update_dentist_form");
 
-      console.log("‚úÖ Formulario de actualizaci√≥n preparado");
+      logger.info("‚úÖ Formulario de actualizaci√≥n preparado");
     } catch (error) {
-      console.error("‚ùå Error al preparar formulario de actualizaci√≥n:", error);
+      logger.error("‚ùå Error al preparar formulario de actualizaci√≥n:", error);
       this.uiManager.showMessage(
         "Error al preparar el formulario de edici√≥n",
         "danger"
@@ -421,7 +430,7 @@ class DentistFormManager {
   // Preparar formulario para edici√≥n (m√©todo m√°s gen√©rico)
   async prepareEditForm(dentistId) {
     try {
-      console.log(
+      logger.info(
         `üìù DentistFormManager - Preparando edici√≥n para dentista ${dentistId}`
       );
 
@@ -431,9 +440,9 @@ class DentistFormManager {
       // Preparar el formulario de actualizaci√≥n
       await this.prepareUpdateForm(dentist);
 
-      console.log("‚úÖ Formulario de edici√≥n preparado completamente");
+      logger.info("‚úÖ Formulario de edici√≥n preparado completamente");
     } catch (error) {
-      console.error(
+      logger.error(
         `‚ùå Error al preparar edici√≥n del dentista ${dentistId}:`,
         error
       );
@@ -444,7 +453,7 @@ class DentistFormManager {
   // Manejar eliminaci√≥n de dentista
   async handleDelete(dentistId) {
     try {
-      console.log(
+      logger.info(
         `üóëÔ∏è DentistFormManager - Procesando eliminaci√≥n de dentista ${dentistId}`
       );
 
@@ -464,7 +473,7 @@ class DentistFormManager {
       );
 
       if (!confirmed) {
-        console.log("‚ùå Eliminaci√≥n cancelada por el usuario");
+        logger.info("‚ùå Eliminaci√≥n cancelada por el usuario");
         return;
       }
 
@@ -478,7 +487,7 @@ class DentistFormManager {
         throw new Error("DataManager no disponible");
       }
 
-      console.log("‚úÖ Dentista eliminado exitosamente");
+      logger.info("‚úÖ Dentista eliminado exitosamente");
 
       // Mostrar mensaje de √©xito
       this.uiManager.showMessage(
@@ -500,7 +509,7 @@ class DentistFormManager {
         }, 1000);
       }
     } catch (error) {
-      console.error(`‚ùå Error al eliminar dentista ${dentistId}:`, error);
+      logger.error(`‚ùå Error al eliminar dentista ${dentistId}:`, error);
       this.uiManager.showMessage(
         `Error al eliminar el dentista: ${error.message}`,
         "danger"
@@ -510,7 +519,7 @@ class DentistFormManager {
 
   // Cancelar edici√≥n
   cancelEdit() {
-    console.log("‚ùå DentistFormManager - Cancelando edici√≥n");
+    logger.info("‚ùå DentistFormManager - Cancelando edici√≥n");
 
     this.currentDentistId = null;
 
@@ -528,12 +537,12 @@ class DentistFormManager {
     // Mostrar mensaje de cancelaci√≥n
     this.uiManager.showMessage("Edici√≥n cancelada", "info", 2000);
 
-    console.log("‚úÖ Edici√≥n cancelada correctamente");
+    logger.info("‚úÖ Edici√≥n cancelada correctamente");
   }
 
   // Limpiar todos los formularios
   clearAllForms() {
-    console.log("üßπ DentistFormManager - Limpiando todos los formularios");
+    logger.info("üßπ DentistFormManager - Limpiando todos los formularios");
 
     const formIds = [
       "add_new_dentist",
@@ -556,7 +565,7 @@ class DentistFormManager {
     this.currentDentistId = null;
     this.isSubmitting = false;
 
-    console.log("‚úÖ Todos los formularios limpiados");
+    logger.info("‚úÖ Todos los formularios limpiados");
   }
 
   // Obtener estado actual del form manager
@@ -580,7 +589,7 @@ class DentistFormManager {
 
   // M√©todo para debugging
   debug() {
-    console.log("üêõ DentistFormManager Debug:", {
+    logger.debug("üêõ DentistFormManager Debug:", {
       currentDentistId: this.currentDentistId,
       isSubmitting: this.isSubmitting,
       hasDataManager: !!this.dataManager,
diff --git a/frontend/public/js/dentist/modules/index.js b/frontend/public/js/dentist/modules/index.js
index 3b8e489..636c22d 100644
--- a/frontend/public/js/dentist/modules/index.js
+++ b/frontend/public/js/dentist/modules/index.js
@@ -3,6 +3,7 @@ import DentistDataManager from "./data-manager.js";
 import DentistUIManager from "./ui-manager.js";
 import DentistFormManager from "./form-manager.js";
 import DentistValidationManager from "./validation-manager.js";
+import logger from "../../logger.js";
 
 class DentistController {
   constructor() {
@@ -16,7 +17,7 @@ class DentistController {
     this.searchTerm = "";
     this.dentists = [];
 
-    console.log("DentistController inicializado:", {
+    logger.info("DentistController inicializado:", {
       currentPage: this.currentPage,
     });
   }
@@ -33,12 +34,12 @@ class DentistController {
   // Inicializar controlador
   async init() {
     if (this.isInitialized) {
-      console.log("‚ö†Ô∏è DentistController ya est√° inicializado");
+      logger.warn("‚ö†Ô∏è DentistController ya est√° inicializado");
       return;
     }
 
     try {
-      console.log("üöÄ Iniciando DentistController...");
+  logger.info("üöÄ Iniciando DentistController...");
 
       // Inicializar managers
       this.formManager.init();
@@ -55,15 +56,15 @@ class DentistController {
           await this.initEditPage();
           break;
         default:
-          console.warn(`P√°gina no reconocida: ${this.currentPage}`);
+      logger.warn(`P√°gina no reconocida: ${this.currentPage}`);
       }
 
       this.setupGlobalFunctions();
       this.isInitialized = true;
 
-      console.log("‚úÖ DentistController inicializado correctamente");
+  logger.info("‚úÖ DentistController inicializado correctamente");
     } catch (error) {
-      console.error("‚ùå Error al inicializar DentistController:", error);
+      logger.error("‚ùå Error al inicializar DentistController:", error);
       this.uiManager.showMessage(
         "Error al inicializar la aplicaci√≥n",
         "danger"
@@ -74,7 +75,7 @@ class DentistController {
   // Inicializar p√°gina de lista
   async initListPage() {
     try {
-      console.log("üìã Inicializando p√°gina de lista de dentistas...");
+  logger.info("üìã Inicializando p√°gina de lista de dentistas...");
 
       this.uiManager.showMessage("Cargando dentistas...", "info");
 
@@ -87,7 +88,7 @@ class DentistController {
       // Ocultar mensaje de carga
       this.uiManager.hideMessage();
 
-      console.log("‚úÖ P√°gina de lista inicializada");
+  logger.info("‚úÖ P√°gina de lista inicializada");
     } catch (error) {
       console.error("‚ùå Error al inicializar p√°gina de lista:", error);
       this.uiManager.showMessage("Error al cargar los dentistas", "danger");
@@ -98,9 +99,9 @@ class DentistController {
   // Inicializar p√°gina de agregar
   async initAddPage() {
     try {
-      console.log("‚ûï Inicializando p√°gina de agregar dentista...");
+  logger.info("‚ûï Inicializando p√°gina de agregar dentista...");
 
-      console.log("‚úÖ P√°gina de agregar inicializada");
+  logger.info("‚úÖ P√°gina de agregar inicializada");
     } catch (error) {
       console.error("‚ùå Error al inicializar p√°gina de agregar:", error);
       this.uiManager.showMessage(
@@ -116,7 +117,7 @@ class DentistController {
   // Inicializar p√°gina de editar
   async initEditPage() {
     try {
-      console.log("‚úèÔ∏è Inicializando p√°gina de editar dentista...");
+  logger.info("‚úèÔ∏è Inicializando p√°gina de editar dentista...");
 
       // Obtener ID del dentista desde la URL o variable global
       const dentistId = this.getDentistIdFromPage();
@@ -130,9 +131,9 @@ class DentistController {
       // Cargar datos del dentista
       await this.formManager.loadDentistForEdit(dentistId);
 
-      console.log("‚úÖ P√°gina de editar inicializada");
+      logger.info("‚úÖ P√°gina de editar inicializada");
     } catch (error) {
-      console.error("‚ùå Error al inicializar p√°gina de editar:", error);
+      logger.error("‚ùå Error al inicializar p√°gina de editar:", error);
       this.uiManager.showMessage(
         "Error al cargar los datos del dentista",
         "danger"
@@ -165,17 +166,17 @@ class DentistController {
   // Cargar lista de dentistas
   async loadList() {
     try {
-      console.log("üìä DentistController - Cargando lista...");
+      logger.info("üìä DentistController - Cargando lista...");
 
       this.dentists = await this.dataManager.loadAllDentists();
 
       // Renderizar tabla
       this.uiManager.renderDentistsTable(this.dentists);
 
-      console.log(`‚úÖ ${this.dentists.length} dentistas cargados en la lista`);
+      logger.info(`‚úÖ ${this.dentists.length} dentistas cargados en la lista`);
       return this.dentists;
     } catch (error) {
-      console.error("‚ùå Error al cargar lista:", error);
+      logger.error("‚ùå Error al cargar lista:", error);
       this.uiManager.showMessage(
         "Error al cargar la lista de dentistas",
         "danger"
@@ -200,7 +201,7 @@ class DentistController {
         }, 300);
       });
 
-      console.log("üîç B√∫squeda de dentistas configurada");
+      logger.info("üîç B√∫squeda de dentistas configurada");
     }
 
     if (clearButton) {
@@ -212,12 +213,12 @@ class DentistController {
 
   // Realizar b√∫squeda
   performSearch() {
-    console.log(`üîç Buscando: "${this.searchTerm}"`);
+    logger.info(`üîç Buscando: "${this.searchTerm}"`);
 
     const results = this.dataManager.searchDentists(this.searchTerm);
     this.uiManager.displaySearchResults(results, this.searchTerm);
 
-    console.log(`üìã Resultados de b√∫squeda: ${results.length} dentistas`);
+    logger.info(`üìã Resultados de b√∫squeda: ${results.length} dentistas`);
     return results;
   }
 
@@ -232,50 +233,42 @@ class DentistController {
     this.uiManager.renderDentistsTable(this.dentists);
     this.uiManager.hideMessage();
 
-    console.log("üßπ B√∫squeda limpiada");
+    logger.info("üßπ B√∫squeda limpiada");
   }
 
   // Editar dentista
   async editDentist(id) {
     try {
-      console.log(`‚úèÔ∏è DentistController - Editando dentista ${id}`);
+      logger.info(`‚úèÔ∏è DentistController - Editando dentista ${id}`);
 
-      // Cargar datos del dentista
       const dentist = await this.dataManager.loadDentistById(id);
 
       // Preparar formulario de actualizaci√≥n
       this.formManager.prepareUpdateForm(dentist);
 
-      console.log("‚úÖ Formulario de edici√≥n preparado");
+      logger.info("‚úÖ Formulario de edici√≥n preparado");
     } catch (error) {
-      console.error(`‚ùå Error al preparar edici√≥n del dentista ${id}:`, error);
-      this.uiManager.showMessage(
-        `Error al cargar el dentista: ${error.message}`,
-        "danger"
-      );
+      logger.error(`‚ùå Error al preparar edici√≥n del dentista ${id}:`, error);
+      this.uiManager.showMessage(`Error al cargar el dentista: ${error.message}`, "danger");
     }
   }
 
   // Eliminar dentista
   async deleteDentist(id) {
     try {
-      console.log(`üóëÔ∏è DentistController - Eliminando dentista ${id}`);
+      logger.info(`üóëÔ∏è DentistController - Eliminando dentista ${id}`);
 
       // Usar el formManager para manejar la eliminaci√≥n
       await this.formManager.handleDelete(id);
     } catch (error) {
-      console.error(`‚ùå Error al eliminar dentista ${id}:`, error);
-      this.uiManager.showMessage(
-        `Error al eliminar el dentista: ${error.message}`,
-        "danger"
-      );
+      logger.error(`‚ùå Error al eliminar dentista ${id}:`, error);
+      this.uiManager.showMessage(`Error al eliminar el dentista: ${error.message}`, "danger");
     }
   }
 
   // Cancelar edici√≥n
   cancelEdit() {
-    console.log("‚ùå DentistController - Cancelando edici√≥n");
-
+    logger.info("‚ùå DentistController - Cancelando edici√≥n");
     this.formManager.cancelEdit();
     this.uiManager.hideMessage();
   }
@@ -285,10 +278,10 @@ class DentistController {
     try {
       const stats = this.dataManager.getDentistStats();
       this.uiManager.displayStats(stats);
-      console.log("üìä Estad√≠sticas mostradas:", stats);
+      logger.info("üìä Estad√≠sticas mostradas:", stats);
       return stats;
     } catch (error) {
-      console.error("‚ùå Error al mostrar estad√≠sticas:", error);
+      logger.error("‚ùå Error al mostrar estad√≠sticas:", error);
       this.uiManager.showMessage("Error al cargar estad√≠sticas", "danger");
     }
   }
@@ -296,7 +289,7 @@ class DentistController {
   // Exportar dentistas
   exportDentists(format = "csv") {
     try {
-      console.log(`üì§ Exportando dentistas en formato ${format}`);
+      logger.info(`üì§ Exportando dentistas en formato ${format}`);
 
       if (format === "csv") {
         this.exportToCSV();
@@ -377,7 +370,6 @@ class DentistController {
         errors: ["Sistema de validaci√≥n no disponible"],
       };
     };
-
     window.getDentistById = async (id) => {
       if (this.dataManager) {
         return this.dataManager.loadDentistById(id);
@@ -396,7 +388,7 @@ class DentistController {
     window.clearDentistCache = () => {
       if (this.dataManager) {
         this.dataManager.clearCache();
-        console.log("üßπ Cache de dentistas limpiado");
+        logger.info("üßπ Cache de dentistas limpiado");
       }
     };
 
@@ -405,11 +397,11 @@ class DentistController {
         this.formManager.clearAllForms();
         this.uiManager.clearMessages();
         this.uiManager.toggleUpdateSection(false);
-        console.log("üîÑ UI de dentistas resetata");
+        logger.info("üîÑ UI de dentistas resetata");
       }
     };
 
-    console.log("üåê Funciones globales de dentistas configuradas");
+    logger.info("üåê Funciones globales de dentistas configuradas");
   }
 
   // Obtener instancia del controlador (PATR√ìN SINGLETON)
@@ -434,14 +426,12 @@ class DentistController {
     this.dentists = [];
     this.currentDentist = null;
     this.searchTerm = "";
-
-    console.log("üßπ DentistController limpiado");
+    logger.info("üßπ DentistController limpiado");
   }
 
   // M√©todo para debugging
   debug() {
     return {
-      isInitialized: this.isInitialized,
       currentPage: this.currentPage,
       dentistsCount: this.dentists?.length || 0,
       searchTerm: this.searchTerm,
@@ -459,9 +449,9 @@ document.addEventListener("DOMContentLoaded", async () => {
   try {
     const controller = DentistController.getInstance();
     await controller.init();
-    console.log("‚úÖ DentistController inicializado autom√°ticamente");
+    logger.info("‚úÖ DentistController inicializado autom√°ticamente");
   } catch (error) {
-    console.error("‚ùå Error en inicializaci√≥n autom√°tica:", error);
+    logger.error("‚ùå Error en inicializaci√≥n autom√°tica:", error);
   }
 });
 
diff --git a/frontend/public/js/dentist/modules/ui-manager.js b/frontend/public/js/dentist/modules/ui-manager.js
index 8de6b7f..ae6f69a 100644
--- a/frontend/public/js/dentist/modules/ui-manager.js
+++ b/frontend/public/js/dentist/modules/ui-manager.js
@@ -1,3 +1,5 @@
+import logger from "../../logger.js";
+
 class DentistUIManager {
   constructor() {
     this.messageContainer = null;
@@ -6,9 +8,7 @@ class DentistUIManager {
 
   // Mostrar mensaje al usuario
   showMessage(message, type = "info", duration = 5000) {
-    console.log(
-      `üì¢ DentistUIManager - Mostrando mensaje: ${message} (${type})`
-    );
+    logger.info(`üì¢ DentistUIManager - Mostrando mensaje: ${message} (${type})`);
 
     // Remover mensajes anteriores
     this.clearMessages();
@@ -83,11 +83,11 @@ class DentistUIManager {
 
   // Renderizar tabla de dentistas
   renderDentistsTable(dentists) {
-    console.log("üìã DentistUIManager - Renderizando tabla de dentistas...");
+  logger.debug("DentistUIManager - Renderizando tabla de dentistas...");
 
     const tableBody = document.getElementById("dentistTableBody");
     if (!tableBody) {
-      console.warn("‚ö†Ô∏è No se encontr√≥ la tabla de dentistas");
+      logger.warn("‚ö†Ô∏è No se encontr√≥ la tabla de dentistas");
       return;
     }
 
@@ -132,15 +132,12 @@ class DentistUIManager {
       tableBody.appendChild(row);
     });
 
-    console.log(`‚úÖ ${dentists.length} dentistas mostrados en la tabla`);
+  logger.info(`‚úÖ ${dentists.length} dentistas mostrados en la tabla`);
   }
 
   // Llenar formulario con datos de dentista
   fillForm(dentist, formType = "edit") {
-    console.log(
-      `üìù DentistUIManager - Llenando formulario ${formType}:`,
-      dentist
-    );
+    logger.debug(`üìù DentistUIManager - Llenando formulario ${formType}:`, dentist);
 
     const fields = {
       edit: {
@@ -166,7 +163,7 @@ class DentistUIManager {
       }
     });
 
-    console.log(`‚úÖ Formulario ${formType} llenado correctamente`);
+  logger.info(`‚úÖ Formulario ${formType} llenado correctamente`);
   }
 
   // Limpiar formulario
@@ -175,7 +172,7 @@ class DentistUIManager {
     if (form) {
       form.reset();
       this.clearValidationStyles(form);
-      console.log(`üßπ Formulario ${formId} limpiado`);
+  logger.info(`üßπ Formulario ${formId} limpiado`);
     }
   }
 
diff --git a/frontend/public/js/dentist/modules/validation-manager.js b/frontend/public/js/dentist/modules/validation-manager.js
index 22f9245..5afa4fa 100644
--- a/frontend/public/js/dentist/modules/validation-manager.js
+++ b/frontend/public/js/dentist/modules/validation-manager.js
@@ -1,3 +1,5 @@
+import logger from "../../logger.js";
+
 class DentistValidationManager {
   constructor() {
     this.validationRules = {
@@ -31,7 +33,6 @@ class DentistValidationManager {
       },
     };
   }
-  s;
 
   // Validar un campo espec√≠fico
   validateField(fieldName, value) {
@@ -185,7 +186,7 @@ class DentistValidationManager {
 
       return { isValid: true, message: "" };
     } catch (error) {
-      console.error("Error al validar matr√≠cula √∫nica:", error);
+      logger.error("Error al validar matr√≠cula √∫nica:", error);
       return {
         isValid: false,
         message: "Error al verificar duplicados de matr√≠cula",
@@ -198,7 +199,7 @@ class DentistValidationManager {
     const form = document.getElementById(formId);
     if (!form) return;
 
-    console.log(
+    logger.debug(
       `üîß DentistValidationManager - Configurando validaci√≥n para ${formId}`
     );
 
@@ -436,7 +437,7 @@ class DentistValidationManager {
     );
     feedbacks.forEach((feedback) => feedback.remove());
 
-    console.log(`üßπ Validaci√≥n del formulario ${formId} limpiada`);
+  logger.info(`üßπ Validaci√≥n del formulario ${formId} limpiada`);
   }
 
   // Validar formulario completo
diff --git a/frontend/public/js/logger.js b/frontend/public/js/logger.js
new file mode 100644
index 0000000..dd6f1f5
--- /dev/null
+++ b/frontend/public/js/logger.js
@@ -0,0 +1,23 @@
+// Logger ligero para controlar salida en producci√≥n
+// Activar logs informativos en el navegador definiendo `window.APP_DEBUG = true` antes de cargar los scripts.
+const DEBUG = (typeof window !== 'undefined' && (window.APP_DEBUG === true || window.APP_DEBUG === 'true')) || false;
+
+const logger = {
+  log: function(...args) {
+    if (DEBUG) console.log(...args);
+  },
+  info: function(...args) {
+    if (DEBUG) console.info(...args);
+  },
+  debug: function(...args) {
+    if (DEBUG) console.debug(...args);
+  },
+  warn: function(...args) {
+    console.warn(...args);
+  },
+  error: function(...args) {
+    console.error(...args);
+  }
+};
+
+export default logger;
diff --git a/frontend/public/js/patient/modules/data-manager.js b/frontend/public/js/patient/modules/data-manager.js
index 6b4ceb5..01e9cf7 100644
--- a/frontend/public/js/patient/modules/data-manager.js
+++ b/frontend/public/js/patient/modules/data-manager.js
@@ -1,4 +1,6 @@
 import PatientAPI from "../../api/patient-api.js";
+import logger from "../../logger.js";
+import { parseYMDToLocalDate, formatLocalDate } from "../../utils/date-utils.js";
 
 class PatientDataManager {
   constructor() {
@@ -10,13 +12,13 @@ class PatientDataManager {
   // Cargar todos los pacientes
   async loadAllPatients() {
     try {
-      console.log("üìä PatientDataManager - Cargando lista de pacientes...");
+  logger.info("PatientDataManager - Cargando lista de pacientes...");
 
       // Verificar cache
       const cacheKey = "all-patients";
       const cached = this.getCachedData(cacheKey);
       if (cached) {
-        console.log("‚úÖ Pacientes cargados desde cache");
+        logger.info("Pacientes cargados desde cache");
         this.patients = cached;
         return cached;
       }
@@ -25,7 +27,7 @@ class PatientDataManager {
       this.patients = response;
       this.setCachedData(cacheKey, response);
 
-      console.log(`‚úÖ ${this.patients.length} pacientes cargados desde API`);
+  logger.info(`${this.patients.length} pacientes cargados desde API`);
       return this.patients;
     } catch (error) {
       console.error("‚ùå Error al cargar pacientes:", error);
@@ -36,13 +38,13 @@ class PatientDataManager {
   // Obtener paciente por ID
   async loadPatientById(id) {
     try {
-      console.log(`üîç PatientDataManager - Buscando paciente ID: ${id}`);
+  logger.debug(`PatientDataManager - Buscando paciente ID: ${id}`);
 
       // Verificar cache
       const cacheKey = `patient-${id}`;
       const cached = this.getCachedData(cacheKey);
       if (cached) {
-        console.log("‚úÖ Paciente cargado desde cache");
+  logger.info("Paciente cargado desde cache");
         return cached;
       }
 
@@ -51,7 +53,7 @@ class PatientDataManager {
         const found = this.patients.find((p) => p.id === parseInt(id));
         if (found) {
           this.setCachedData(cacheKey, found);
-          console.log("‚úÖ Paciente encontrado en lista local");
+          logger.info("Paciente encontrado en lista local");
           return found;
         }
       }
@@ -60,7 +62,7 @@ class PatientDataManager {
       const patient = await PatientAPI.findById(id);
       this.setCachedData(cacheKey, patient);
 
-      console.log("‚úÖ Paciente cargado desde API");
+  logger.info("Paciente cargado desde API");
       return patient;
     } catch (error) {
       console.error(`‚ùå Error al cargar paciente ${id}:`, error);
@@ -71,10 +73,7 @@ class PatientDataManager {
   // Crear nuevo paciente
   async createPatient(patientData) {
     try {
-      console.log(
-        "‚ûï PatientDataManager - Creando nuevo paciente:",
-        patientData
-      );
+  logger.info("PatientDataManager - Creando nuevo paciente:", patientData);
 
       const newPatient = await PatientAPI.create(patientData);
 
@@ -82,7 +81,7 @@ class PatientDataManager {
       this.patients.push(newPatient);
       this.invalidateCache("all-patients");
 
-      console.log("‚úÖ Paciente creado exitosamente:", newPatient);
+  logger.info("Paciente creado exitosamente:", newPatient);
       return newPatient;
     } catch (error) {
       console.error("‚ùå Error al crear paciente:", error);
@@ -93,10 +92,7 @@ class PatientDataManager {
   // Actualizar paciente
   async updatePatient(id, patientData) {
     try {
-      console.log(
-        `üîÑ PatientDataManager - Actualizando paciente ${id}:`,
-        patientData
-      );
+  logger.info(`PatientDataManager - Actualizando paciente ${id}:`, patientData);
 
       const updatedPatient = await PatientAPI.update(id, patientData);
 
@@ -109,7 +105,7 @@ class PatientDataManager {
       this.invalidateCache("all-patients");
       this.invalidateCache(`patient-${id}`);
 
-      console.log("‚úÖ Paciente actualizado exitosamente:", updatedPatient);
+  logger.info("Paciente actualizado exitosamente:", updatedPatient);
       return updatedPatient;
     } catch (error) {
       console.error(`‚ùå Error al actualizar paciente ${id}:`, error);
@@ -120,7 +116,7 @@ class PatientDataManager {
   // Eliminar paciente
   async deletePatient(id) {
     try {
-      console.log(`üóëÔ∏è PatientDataManager - Eliminando paciente ${id}`);
+  logger.info(`PatientDataManager - Eliminando paciente ${id}`);
 
       await PatientAPI.delete(id);
 
@@ -129,7 +125,7 @@ class PatientDataManager {
       this.invalidateCache("all-patients");
       this.invalidateCache(`patient-${id}`);
 
-      console.log("‚úÖ Paciente eliminado exitosamente");
+  logger.info("Paciente eliminado exitosamente");
       return true;
     } catch (error) {
       console.error(`‚ùå Error al eliminar paciente ${id}:`, error);
@@ -182,16 +178,24 @@ class PatientDataManager {
 
   // Validar fecha
   isValidDate(dateString) {
-    const date = new Date(dateString);
-    const today = new Date();
-
-    // Verificar que la fecha sea v√°lida y no sea futura
-    return (
-      date instanceof Date &&
-      !isNaN(date) &&
-      date <= today &&
-      date > new Date("1900-01-01")
-    );
+    // Construir fecha local segura si viene en formato YYYY-MM-DD
+    try {
+      let date;
+      if (typeof dateString === "string" && /^\d{4}-\d{2}-\d{2}$/.test(dateString)) {
+        const parts = dateString.split("-");
+        const y = Number(parts[0]);
+        const m = Number(parts[1]) - 1;
+        const d = Number(parts[2]);
+        date = new Date(y, m, d);
+      } else {
+        date = new Date(dateString);
+      }
+      const today = new Date();
+      // Verificar que la fecha sea v√°lida y no sea futura
+      return date instanceof Date && !isNaN(date) && date <= today && date > new Date(1900, 0, 1);
+    } catch (e) {
+      return false;
+    }
   }
 
   // Buscar pacientes por criterio - CORREGIDO
@@ -235,7 +239,14 @@ class PatientDataManager {
     // Contar admisiones recientes (√∫ltimos 30 d√≠as)
     stats.recentAdmissions = this.patients.filter((patient) => {
       if (!patient.admissionDate) return false;
-      const admissionDate = new Date(patient.admissionDate + "T00:00:00");
+      const ad = patient.admissionDate;
+      let admissionDate;
+      if (typeof ad === "string" && /^\d{4}-\d{2}-\d{2}$/.test(ad)) {
+        const parts = ad.split("-");
+        admissionDate = new Date(Number(parts[0]), Number(parts[1]) - 1, Number(parts[2]));
+      } else {
+        admissionDate = new Date(ad);
+      }
       return admissionDate >= thirtyDaysAgo;
     }).length;
 
@@ -289,7 +300,7 @@ class PatientDataManager {
   // Calcular edad
   calculateAge(birthDate) {
     const today = new Date();
-    const birth = new Date(birthDate);
+  const birth = parseYMDToLocalDate(birthDate) || new Date(birthDate);
     let age = today.getFullYear() - birth.getFullYear();
     const monthDiff = today.getMonth() - birth.getMonth();
 
@@ -310,7 +321,8 @@ class PatientDataManager {
 
     return this.patients.filter((patient) => {
       if (!patient.admissionDate) return false;
-      return new Date(patient.admissionDate) > cutoffDate;
+      const ad = parseYMDToLocalDate(patient.admissionDate) || new Date(patient.admissionDate);
+      return ad > cutoffDate;
     });
   }
 
diff --git a/frontend/public/js/patient/modules/form-manager.js b/frontend/public/js/patient/modules/form-manager.js
index 4d7ec68..eb47d9d 100644
--- a/frontend/public/js/patient/modules/form-manager.js
+++ b/frontend/public/js/patient/modules/form-manager.js
@@ -1,6 +1,7 @@
 import PatientAPI from "../../api/patient-api.js";
 import PatientValidationManager from "./validation-manager.js";
 import PatientUIManager from "./ui-manager.js";
+import logger from "../../logger.js";
 
 class PatientFormManager {
   constructor(dataManager = null) {
@@ -13,11 +14,11 @@ class PatientFormManager {
 
   // Inicializar formularios
   init() {
-    console.log("üìù PatientFormManager - Inicializando...");
-    this.setupForms();
-    this.setupValidations();
-    this.bindFormEvents();
-    console.log("‚úÖ PatientFormManager - Inicializado correctamente");
+  logger.info("PatientFormManager - Inicializando...");
+  this.setupForms();
+  this.setupValidations();
+  this.bindFormEvents();
+  logger.info("PatientFormManager - Inicializado correctamente");
   }
 
   // Configurar formularios
@@ -25,27 +26,37 @@ class PatientFormManager {
     // Formulario de agregar
     const addForm = document.getElementById("add_new_patient");
     if (addForm) {
-      console.log("‚úÖ Formulario de agregar encontrado");
+      logger.debug("Formulario de agregar encontrado");
     }
 
     // Formulario de actualizar
     const updateForm = document.getElementById("update_patient_form");
     if (updateForm) {
-      console.log("‚úÖ Formulario de actualizar encontrado");
+      logger.debug("Formulario de actualizar encontrado");
     }
 
     // Formulario de editar
     const editForm = document.getElementById("edit_patient_form");
     if (editForm) {
-      console.log("‚úÖ Formulario de editar encontrado");
+      logger.debug("Formulario de editar encontrado");
     }
   }
 
   // Configurar validaciones
   setupValidations() {
-    this.validationManager.setupRealTimeValidation("add_new_patient");
-    this.validationManager.setupRealTimeValidation("update_patient_form");
-    this.validationManager.setupRealTimeValidation("edit_patient_form");
+    const formsToCheck = [
+      "add_new_patient",
+      "update_patient_form",
+      "edit_patient_form",
+    ];
+
+    formsToCheck.forEach((formId) => {
+      if (document.getElementById(formId)) {
+        this.validationManager.setupRealTimeValidation(formId);
+      } else {
+        logger.debug(`Omitiendo configuraci√≥n de validaci√≥n; formulario no presente: ${formId}`);
+      }
+    });
   }
 
   // Enlazar eventos espec√≠ficos de formularios
@@ -61,7 +72,7 @@ class PatientFormManager {
     if (addForm && !addForm.hasAttribute("data-events-bound")) {
       addForm.addEventListener("submit", (e) => this.handleAddSubmit(e));
       addForm.setAttribute("data-events-bound", "true");
-      console.log("‚úÖ Eventos del formulario de agregar paciente configurados");
+      logger.info("Eventos del formulario de agregar paciente configurados");
     }
   }
 
@@ -80,7 +91,7 @@ class PatientFormManager {
           form.addEventListener("submit", (e) => this.handleEditSubmit(e));
         }
         form.setAttribute("data-events-bound", "true");
-        console.log(`‚úÖ Eventos del formulario ${form.id} configurados`);
+        logger.info(`Eventos del formulario ${form.id} configurados`);
       }
     });
 
@@ -89,7 +100,7 @@ class PatientFormManager {
     if (cancelButton && !cancelButton.hasAttribute("data-events-bound")) {
       cancelButton.addEventListener("click", () => this.cancelEdit());
       cancelButton.setAttribute("data-events-bound", "true");
-      console.log("‚úÖ Bot√≥n cancelar configurado");
+      logger.debug("Bot√≥n cancelar configurado");
     }
   }
 
@@ -98,13 +109,13 @@ class PatientFormManager {
     const searchInput = document.getElementById("searchPatient");
     if (searchInput && !searchInput.hasAttribute("data-events-bound")) {
       searchInput.addEventListener("input", (e) => {
-        if (this.dataManager && this.dataManager.searchPatients) {
+          if (this.dataManager && this.dataManager.searchPatients) {
           const results = this.dataManager.searchPatients(e.target.value);
-          console.log(`üîç B√∫squeda: ${results.length} pacientes encontrados`);
+          logger.debug(`B√∫squeda: ${results.length} pacientes encontrados`);
         }
       });
       searchInput.setAttribute("data-events-bound", "true");
-      console.log("‚úÖ Eventos de b√∫squeda configurados");
+      logger.info("Eventos de b√∫squeda configurados");
     }
   }
 
@@ -113,11 +124,11 @@ class PatientFormManager {
     event.preventDefault();
 
     if (this.isSubmitting) {
-      console.log("‚è≥ Formulario ya se est√° enviando...");
+      logger.info("Formulario ya se est√° enviando...");
       return;
     }
 
-    console.log("üì§ PatientFormManager - Procesando nuevo paciente...");
+  logger.info("PatientFormManager - Procesando nuevo paciente...");
 
     const form = event.target;
     const submitButton = form.querySelector('button[type="submit"]');
@@ -150,7 +161,7 @@ class PatientFormManager {
       const formData = new FormData(form);
       const patientData = this.processFormData(formData);
 
-      console.log("üìä Datos del paciente a crear:", patientData);
+  logger.debug("Datos del paciente a crear:", patientData);
 
       // Crear paciente
       let result;
@@ -160,7 +171,7 @@ class PatientFormManager {
         result = await PatientAPI.create(patientData);
       }
 
-      console.log("‚úÖ Paciente creado exitosamente:", result);
+  logger.info("Paciente creado exitosamente:", result);
 
       // Mostrar mensaje de √©xito
       this.uiManager.showMessage(
@@ -175,9 +186,9 @@ class PatientFormManager {
       // vuelva a rellenarse si el usuario navega fuera y regresa a la p√°gina de agregar.
       try {
         localStorage.removeItem("patient_draft_data");
-        console.log("üßπ Borrador de paciente eliminado de localStorage");
+        logger.debug("Borrador de paciente eliminado de localStorage");
       } catch (err) {
-        console.warn("‚ö†Ô∏è No se pudo eliminar patient_draft_data de localStorage:", err);
+        logger.warn("No se pudo eliminar patient_draft_data de localStorage:", err);
       }
 
       // Redireccionar despu√©s de un tiempo
@@ -185,7 +196,7 @@ class PatientFormManager {
         window.location.href = "/patients";
       }, 2000);
     } catch (error) {
-      console.error("‚ùå Error al crear paciente:", error);
+      logger.error("Error al crear paciente:", error);
 
       let errorMessage = "Error desconocido";
       if (error.message) {
@@ -194,10 +205,7 @@ class PatientFormManager {
         errorMessage = error;
       }
 
-      this.uiManager.showMessage(
-        `Error al crear el paciente: ${errorMessage}`,
-        "danger"
-      );
+      this.uiManager.showMessage(`Error al crear el paciente: ${errorMessage}`, "danger");
     } finally {
       this.isSubmitting = false;
       this.uiManager.resetLoadingState(submitButton, "Guardar Paciente");
@@ -209,11 +217,11 @@ class PatientFormManager {
     event.preventDefault();
 
     if (this.isSubmitting) {
-      console.log("‚è≥ Formulario ya se est√° enviando...");
+      logger.info("Formulario ya se est√° enviando...");
       return;
     }
 
-    console.log("üîÑ PatientFormManager - Actualizando paciente...");
+  logger.info("PatientFormManager - Actualizando paciente...");
 
     const form = event.target;
     const submitButton = form.querySelector('button[type="submit"]');
@@ -244,7 +252,7 @@ class PatientFormManager {
       const patientData = this.processFormData(formData);
       patientData.id = parseInt(patientId);
 
-      console.log("üìä Datos del paciente a actualizar:", patientData);
+  logger.debug("Datos del paciente a actualizar:", patientData);
 
       // Actualizar paciente
       let result;
@@ -254,7 +262,7 @@ class PatientFormManager {
         result = await PatientAPI.update(patientId, patientData);
       }
 
-      console.log("‚úÖ Paciente actualizado exitosamente:", result);
+  logger.info("Paciente actualizado exitosamente:", result);
 
       // Mostrar mensaje de √©xito
       this.uiManager.showMessage(
@@ -276,7 +284,7 @@ class PatientFormManager {
         }, 1000);
       }
     } catch (error) {
-      console.error("‚ùå Error al actualizar paciente:", error);
+      logger.error("Error al actualizar paciente:", error);
 
       let errorMessage = "Error desconocido";
       if (error.message) {
@@ -300,11 +308,11 @@ class PatientFormManager {
     event.preventDefault();
 
     if (this.isSubmitting) {
-      console.log("‚è≥ Formulario ya se est√° enviando...");
+      logger.info("Formulario ya se est√° enviando...");
       return;
     }
 
-    console.log("‚úèÔ∏è PatientFormManager - Editando paciente...");
+  logger.info("PatientFormManager - Editando paciente...");
 
     const form = event.target;
     const submitButton = form.querySelector('button[type="submit"]');
@@ -335,7 +343,7 @@ class PatientFormManager {
       const patientData = this.processFormData(formData);
       patientData.id = parseInt(patientId);
 
-      console.log("üìä Datos del paciente a editar:", patientData);
+  logger.debug("Datos del paciente a editar:", patientData);
 
       // Actualizar paciente
       let result;
@@ -345,7 +353,7 @@ class PatientFormManager {
         result = await PatientAPI.update(patientId, patientData);
       }
 
-      console.log("‚úÖ Paciente editado exitosamente:", result);
+  logger.info("Paciente editado exitosamente:", result);
 
       // Mostrar mensaje de √©xito
       this.uiManager.showMessage(
@@ -358,7 +366,7 @@ class PatientFormManager {
         window.location.href = "/patients";
       }, 2000);
     } catch (error) {
-      console.error("‚ùå Error al editar paciente:", error);
+      logger.error("Error al editar paciente:", error);
 
       let errorMessage = "Error desconocido";
       if (error.message) {
@@ -467,9 +475,7 @@ class PatientFormManager {
   // Cargar datos en formulario de edici√≥n
   async loadPatientForEdit(patientId) {
     try {
-      console.log(
-        `üìã PatientFormManager - Cargando paciente ${patientId} para editar`
-      );
+      logger.info(`PatientFormManager - Cargando paciente ${patientId} para editar`);
 
       this.uiManager.showMessage("Cargando datos del paciente...", "info");
 
@@ -483,7 +489,7 @@ class PatientFormManager {
         patient = await PatientAPI.findById(patientId);
       }
 
-      console.log("‚úÖ Paciente cargado para editar:", patient);
+  logger.info("Paciente cargado para editar:", patient);
 
       // Llenar formulario de edici√≥n
       this.uiManager.fillForm(patient, "edit");
@@ -508,9 +514,7 @@ class PatientFormManager {
   // Preparar formulario para actualizaci√≥n (llamado desde botones de la lista)
   async prepareUpdateForm(patient) {
     try {
-      console.log(
-        "üìù PatientFormManager - Preparando formulario de actualizaci√≥n"
-      );
+      logger.info("PatientFormManager - Preparando formulario de actualizaci√≥n");
 
       this.currentPatientId = patient.id;
 
@@ -523,7 +527,7 @@ class PatientFormManager {
       // Limpiar validaciones previas
       this.validationManager.clearFormValidation("update_patient_form");
 
-      console.log("‚úÖ Formulario de actualizaci√≥n preparado");
+  logger.info("Formulario de actualizaci√≥n preparado");
     } catch (error) {
       console.error("‚ùå Error al preparar formulario de actualizaci√≥n:", error);
       this.uiManager.showMessage(
@@ -536,9 +540,7 @@ class PatientFormManager {
   // Preparar formulario para edici√≥n (m√©todo m√°s gen√©rico)
   async prepareEditForm(patientId) {
     try {
-      console.log(
-        `üìù PatientFormManager - Preparando edici√≥n para paciente ${patientId}`
-      );
+      logger.info(`PatientFormManager - Preparando edici√≥n para paciente ${patientId}`);
 
       // Cargar datos del paciente
       const patient = await this.loadPatientForEdit(patientId);
@@ -546,7 +548,7 @@ class PatientFormManager {
       // Preparar el formulario de actualizaci√≥n
       await this.prepareUpdateForm(patient);
 
-      console.log("‚úÖ Formulario de edici√≥n preparado completamente");
+  logger.info("Formulario de edici√≥n preparado completamente");
     } catch (error) {
       console.error(
         `‚ùå Error al preparar edici√≥n del paciente ${patientId}:`,
@@ -559,9 +561,7 @@ class PatientFormManager {
   // Manejar eliminaci√≥n de paciente
   async handleDelete(patientId) {
     try {
-      console.log(
-        `üóëÔ∏è PatientFormManager - Procesando eliminaci√≥n de paciente ${patientId}`
-      );
+      logger.info(`PatientFormManager - Procesando eliminaci√≥n de paciente ${patientId}`);
 
       // Cargar datos del paciente para mostrar en la confirmaci√≥n
       let patient;
@@ -580,7 +580,7 @@ class PatientFormManager {
       );
 
       if (!confirmed) {
-        console.log("‚ùå Eliminaci√≥n cancelada por el usuario");
+        logger.info("Eliminaci√≥n cancelada por el usuario");
         return;
       }
     } catch (error) {
@@ -605,7 +605,7 @@ class PatientFormManager {
         await PatientAPI.delete(patientId);
       }
 
-      console.log("‚úÖ Paciente eliminado exitosamente");
+  logger.info("Paciente eliminado exitosamente");
 
       // Mostrar mensaje de √©xito
       this.uiManager.showMessage(
@@ -627,10 +627,7 @@ class PatientFormManager {
         }, 1000);
       }
     } catch (error) {
-      console.error(
-        `‚ùå Error en eliminaci√≥n del paciente ${patientId}:`,
-        error
-      );
+      logger.error(`Error en eliminaci√≥n del paciente ${patientId}:`, error);
       this.uiManager.showMessage(
         `Error al eliminar el paciente: ${error.message}`,
         "danger"
@@ -640,7 +637,7 @@ class PatientFormManager {
 
   // Cancelar edici√≥n
   cancelEdit() {
-    console.log("‚ùå PatientFormManager - Cancelando edici√≥n");
+  logger.info("PatientFormManager - Cancelando edici√≥n");
 
     this.currentPatientId = null;
 
@@ -658,12 +655,12 @@ class PatientFormManager {
     // Mostrar mensaje de cancelaci√≥n
     this.uiManager.showMessage("Edici√≥n cancelada", "info", 2000);
 
-    console.log("‚úÖ Edici√≥n cancelada correctamente");
+  logger.info("Edici√≥n cancelada correctamente");
   }
 
   // Limpiar todos los formularios
   clearAllForms() {
-    console.log("üßπ PatientFormManager - Limpiando todos los formularios");
+  logger.info("PatientFormManager - Limpiando todos los formularios");
 
     const formIds = [
       "add_new_patient",
@@ -686,7 +683,7 @@ class PatientFormManager {
     this.currentPatientId = null;
     this.isSubmitting = false;
 
-    console.log("‚úÖ Todos los formularios limpiados");
+  logger.info("Todos los formularios limpiados");
   }
 
   // Obtener estado actual del form manager
@@ -710,7 +707,7 @@ class PatientFormManager {
 
   // M√©todo para debugging
   debug() {
-    console.log("üêõ PatientFormManager Debug:", {
+    logger.debug("PatientFormManager Debug:", {
       currentPatientId: this.currentPatientId,
       isSubmitting: this.isSubmitting,
       hasDataManager: !!this.dataManager,
diff --git a/frontend/public/js/patient/modules/index.js b/frontend/public/js/patient/modules/index.js
index bb24423..7fc67b6 100644
--- a/frontend/public/js/patient/modules/index.js
+++ b/frontend/public/js/patient/modules/index.js
@@ -3,6 +3,7 @@ import PatientDataManager from "./data-manager.js";
 import PatientFormManager from "./form-manager.js";
 import PatientValidationManager from "./validation-manager.js";
 import PatientUIManager from "./ui-manager.js";
+import logger from "../../logger.js";
 
 class PatientController {
   constructor() {
@@ -16,7 +17,7 @@ class PatientController {
     this.searchTerm = "";
     this.patients = [];
 
-    console.log("PatientController inicializado:", {
+    logger.debug("PatientController inicializado:", {
       currentPage: this.currentPage,
     });
   }
@@ -33,12 +34,12 @@ class PatientController {
   // Inicializar controlador
   async init() {
     if (this.isInitialized) {
-      console.log("‚ö†Ô∏è PatientController ya est√° inicializado");
+      logger.warn("PatientController ya est√° inicializado");
       return;
     }
 
     try {
-      console.log("üöÄ Iniciando PatientController...");
+  logger.info("Iniciando PatientController...");
 
       // Inicializar managers
       this.formManager.init();
@@ -55,15 +56,15 @@ class PatientController {
           await this.initEditPage();
           break;
         default:
-          console.warn(`P√°gina no reconocida: ${this.currentPage}`);
+      logger.warn(`P√°gina no reconocida: ${this.currentPage}`);
       }
 
       this.setupGlobalFunctions();
       this.isInitialized = true;
 
-      console.log("‚úÖ PatientController inicializado correctamente");
+  logger.info("PatientController inicializado correctamente");
     } catch (error) {
-      console.error("‚ùå Error al inicializar PatientController:", error);
+      logger.error("‚ùå Error al inicializar PatientController:", error);
       this.uiManager.showMessage(
         "Error al inicializar la aplicaci√≥n",
         "danger"
@@ -74,7 +75,7 @@ class PatientController {
   // Inicializar p√°gina de lista
   async initListPage() {
     try {
-      console.log("üìã Inicializando p√°gina de lista de pacientes...");
+  logger.info("Inicializando p√°gina de lista de pacientes...");
 
       this.uiManager.showMessage("Cargando pacientes...", "info");
 
@@ -87,9 +88,9 @@ class PatientController {
       // Ocultar mensaje de carga
       this.uiManager.hideMessage();
 
-      console.log("‚úÖ P√°gina de lista inicializada");
+  logger.info("P√°gina de lista inicializada");
     } catch (error) {
-      console.error("‚ùå Error al inicializar p√°gina de lista:", error);
+      logger.error("‚ùå Error al inicializar p√°gina de lista:", error);
       this.uiManager.showMessage("Error al cargar los pacientes", "danger");
       throw new Error(`Error al inicializar p√°gina de lista: ${error.message}`);
     }
@@ -98,11 +99,11 @@ class PatientController {
   // Inicializar p√°gina de agregar
   async initAddPage() {
     try {
-      console.log("‚ûï Inicializando p√°gina de agregar paciente...");
+  logger.info("Inicializando p√°gina de agregar paciente...");
 
-      console.log("‚úÖ P√°gina de agregar inicializada");
+  logger.info("P√°gina de agregar inicializada");
     } catch (error) {
-      console.error("‚ùå Error al inicializar p√°gina de agregar:", error);
+      logger.error("‚ùå Error al inicializar p√°gina de agregar:", error);
       this.uiManager.showMessage(
         "Error al inicializar p√°gina de agregar",
         "danger"
@@ -116,7 +117,7 @@ class PatientController {
   // Inicializar p√°gina de editar
   async initEditPage() {
     try {
-      console.log("‚úèÔ∏è Inicializando p√°gina de editar paciente...");
+  logger.info("Inicializando p√°gina de editar paciente...");
 
       // Obtener ID del paciente desde la URL o variable global
       const patientId = this.getPatientIdFromPage();
@@ -130,9 +131,9 @@ class PatientController {
       // Cargar datos del paciente
       await this.formManager.loadPatientForEdit(patientId);
 
-      console.log("‚úÖ P√°gina de editar inicializada");
+  logger.info("P√°gina de editar inicializada");
     } catch (error) {
-      console.error("‚ùå Error al inicializar p√°gina de editar:", error);
+      logger.error("‚ùå Error al inicializar p√°gina de editar:", error);
       this.uiManager.showMessage(
         "Error al cargar los datos del paciente",
         "danger"
@@ -165,17 +166,17 @@ class PatientController {
   // Cargar lista de pacientes
   async loadList() {
     try {
-      console.log("üìä PatientController - Cargando lista...");
+  logger.info("PatientController - Cargando lista...");
 
       this.patients = await this.dataManager.loadAllPatients();
 
       // Renderizar tabla
       this.uiManager.renderPatientsTable(this.patients);
 
-      console.log(`‚úÖ ${this.patients.length} pacientes cargados en la lista`);
+  logger.info(`${this.patients.length} pacientes cargados en la lista`);
       return this.patients;
     } catch (error) {
-      console.error("‚ùå Error al cargar lista:", error);
+      logger.error("‚ùå Error al cargar lista:", error);
       this.uiManager.showMessage(
         "Error al cargar la lista de pacientes",
         "danger"
@@ -200,7 +201,7 @@ class PatientController {
         }, 300);
       });
 
-      console.log("üîç B√∫squeda de pacientes configurada");
+  logger.debug("B√∫squeda de pacientes configurada");
     }
 
     if (clearButton) {
@@ -212,12 +213,12 @@ class PatientController {
 
   // Realizar b√∫squeda
   performSearch() {
-    console.log(`üîç Buscando: "${this.searchTerm}"`);
+  logger.debug(`Buscando: "${this.searchTerm}"`);
 
     const results = this.dataManager.searchPatients(this.searchTerm);
     this.uiManager.displaySearchResults(results, this.searchTerm);
 
-    console.log(`üìã Resultados de b√∫squeda: ${results.length} pacientes`);
+  logger.debug(`Resultados de b√∫squeda: ${results.length} pacientes`);
   }
 
   // Limpiar b√∫squeda
@@ -231,13 +232,13 @@ class PatientController {
     this.uiManager.renderPatientsTable(this.patients);
     this.uiManager.hideMessage();
 
-    console.log("üßπ B√∫squeda limpiada");
+  logger.debug("B√∫squeda limpiada");
   }
 
   // Editar paciente
   async editPatient(id) {
     try {
-      console.log(`‚úèÔ∏è PatientController - Editando paciente ${id}`);
+  logger.info(`PatientController - Editando paciente ${id}`);
 
       // Cargar datos del paciente
       const patient = await this.dataManager.loadPatientById(id);
@@ -245,9 +246,9 @@ class PatientController {
       // Preparar formulario de actualizaci√≥n
       this.formManager.prepareUpdateForm(patient);
 
-      console.log("‚úÖ Formulario de edici√≥n preparado");
+  logger.info("Formulario de edici√≥n preparado");
     } catch (error) {
-      console.error(`‚ùå Error al preparar edici√≥n del paciente ${id}:`, error);
+      logger.error(`‚ùå Error al preparar edici√≥n del paciente ${id}:`, error);
       this.uiManager.showMessage(
         `Error al cargar el paciente: ${error.message}`,
         "danger"
@@ -258,12 +259,12 @@ class PatientController {
   // Eliminar paciente
   async deletePatient(id) {
     try {
-      console.log(`üóëÔ∏è PatientController - Eliminando paciente ${id}`);
+  logger.info(`PatientController - Eliminando paciente ${id}`);
 
       // Usar el formManager para manejar la eliminaci√≥n
       await this.formManager.handleDelete(id);
     } catch (error) {
-      console.error(`‚ùå Error al eliminar paciente ${id}:`, error);
+      logger.error(`‚ùå Error al eliminar paciente ${id}:`, error);
       this.uiManager.showMessage(
         `Error al eliminar el paciente: ${error.message}`,
         "danger"
@@ -273,7 +274,7 @@ class PatientController {
 
   // Cancelar edici√≥n
   cancelEdit() {
-    console.log("‚ùå PatientController - Cancelando edici√≥n");
+  logger.info("PatientController - Cancelando edici√≥n");
 
     this.formManager.cancelEdit();
     this.uiManager.hideMessage();
@@ -284,10 +285,10 @@ class PatientController {
     try {
       const stats = this.dataManager.getPatientStats();
       this.uiManager.displayStats(stats);
-      console.log("üìä Estad√≠sticas mostradas:", stats);
+  logger.info("Estad√≠sticas mostradas:", stats);
       return stats;
     } catch (error) {
-      console.error("‚ùå Error al mostrar estad√≠sticas:", error);
+      logger.error("‚ùå Error al mostrar estad√≠sticas:", error);
       this.uiManager.showMessage("Error al cargar estad√≠sticas", "danger");
     }
   }
@@ -295,7 +296,7 @@ class PatientController {
   // Exportar pacientes
   exportPatients(format = "csv") {
     try {
-      console.log(`üì§ Exportando pacientes en formato ${format}`);
+  logger.info(`Exportando pacientes en formato ${format}`);
 
       if (format === "csv") {
         this.exportToCSV();
@@ -303,7 +304,7 @@ class PatientController {
         this.exportToJSON();
       }
     } catch (error) {
-      console.error("‚ùå Error al exportar:", error);
+      logger.error("‚ùå Error al exportar:", error);
       this.uiManager.showMessage("Error al exportar pacientes", "danger");
     }
   }
@@ -395,7 +396,7 @@ class PatientController {
     window.clearPatientCache = () => {
       if (this.dataManager) {
         this.dataManager.clearCache();
-        console.log("üßπ Cache de pacientes limpiado");
+  logger.info("Cache de pacientes limpiado");
       }
     };
 
@@ -404,11 +405,11 @@ class PatientController {
         this.formManager.clearAllForms();
         this.uiManager.clearMessages();
         this.uiManager.toggleUpdateSection(false);
-        console.log("üîÑ UI de pacientes resetada");
+  logger.info("UI de pacientes resetada");
       }
     };
 
-    console.log("üåê Funciones globales de pacientes configuradas");
+  logger.info("Funciones globales de pacientes configuradas");
   }
 
   // Obtener instancia del controlador
@@ -434,7 +435,7 @@ class PatientController {
     this.currentPatient = null;
     this.searchTerm = "";
 
-    console.log("üßπ PatientController limpiado");
+  logger.info("PatientController limpiado");
   }
 }
 
@@ -443,9 +444,9 @@ document.addEventListener("DOMContentLoaded", async () => {
   try {
     const controller = PatientController.getInstance();
     await controller.init();
-    console.log("‚úÖ PatientController inicializado autom√°ticamente");
+  logger.info("PatientController inicializado autom√°ticamente");
   } catch (error) {
-    console.error("‚ùå Error en inicializaci√≥n autom√°tica:", error);
+    logger.error("‚ùå Error en inicializaci√≥n autom√°tica:", error);
   }
 });
 
diff --git a/frontend/public/js/patient/modules/ui-manager.js b/frontend/public/js/patient/modules/ui-manager.js
index 6c46367..9a04ef3 100644
--- a/frontend/public/js/patient/modules/ui-manager.js
+++ b/frontend/public/js/patient/modules/ui-manager.js
@@ -1,3 +1,6 @@
+import logger from "../../logger.js";
+import { parseYMDToLocalDate, formatLocalDate } from "../../utils/date-utils.js";
+
 class PatientUIManager {
   constructor() {
     this.messageContainer = null;
@@ -6,9 +9,7 @@ class PatientUIManager {
 
   // Mostrar mensaje al usuario
   showMessage(message, type = "info", duration = 5000) {
-    console.log(
-      `üì¢ PatientUIManager - Mostrando mensaje: ${message} (${type})`
-    );
+  logger.info(`PatientUIManager - Mostrando mensaje: ${message} (${type})`);
 
     // Remover mensajes anteriores
     this.clearMessages();
@@ -121,7 +122,7 @@ class PatientUIManager {
       tableBody.appendChild(row);
     });
 
-    console.log(`‚úÖ Tabla renderizada con ${patients.length} pacientes`);
+  logger.info(`Tabla renderizada con ${patients.length} pacientes`);
   }
 
   // Crear fila de la tabla para un paciente - CORREGIDO
@@ -190,24 +191,8 @@ class PatientUIManager {
   formatAdmissionDate(dateString) {
     if (!dateString) return "No especificada";
 
-    try {
-      // LocalDate viene como YYYY-MM-DD desde el backend
-      const date = new Date(dateString + "T00:00:00"); // Evitar problemas de timezone
-
-      // Verificar si la fecha es v√°lida
-      if (isNaN(date.getTime())) {
-        return dateString; // Retornar original si no se puede parsear
-      }
-
-      return date.toLocaleDateString("es-ES", {
-        year: "numeric",
-        month: "short",
-        day: "numeric",
-      });
-    } catch (error) {
-      console.warn("Error al formatear fecha de admisi√≥n:", error);
-      return dateString || "No especificada";
-    }
+    // LocalDate viene como YYYY-MM-DD desde el backend
+    return formatLocalDate(dateString, 'es-ES', { year: 'numeric', month: 'short', day: 'numeric' });
   }
 
   // Mostrar resultados de b√∫squeda - CORREGIDO
@@ -217,9 +202,7 @@ class PatientUIManager {
       return;
     }
 
-    console.log(
-      `üîç Mostrando ${results.length} resultados para: "${searchTerm}"`
-    );
+  logger.debug(`Mostrando ${results.length} resultados para: "${searchTerm}"`);
 
     // Renderizar resultados en la tabla
     this.renderPatientsTable(results);
@@ -267,9 +250,7 @@ class PatientUIManager {
       this.setFieldValue("id", patient.id);
     }
 
-    console.log(
-      `üìù Formulario ${mode} llenado con datos del paciente ${patient.id}`
-    );
+  logger.debug(`Formulario ${mode} llenado con datos del paciente ${patient.id}`);
   }
 
   // M√©todo auxiliar para establecer valores en campos
@@ -298,7 +279,7 @@ class PatientUIManager {
     if (form) {
       form.reset();
       this.clearValidationStyles(form);
-      console.log(`üßπ Formulario ${formId} limpiado`);
+  logger.debug(`Formulario ${formId} limpiado`);
     }
   }
 
@@ -447,7 +428,7 @@ class PatientUIManager {
     `;
 
     statsContainer.style.display = "block";
-    console.log("üìä Estad√≠sticas mostradas:", stats);
+  logger.info("Estad√≠sticas mostradas:", stats);
   }
 }
 
diff --git a/frontend/public/js/patient/modules/validation-manager.js b/frontend/public/js/patient/modules/validation-manager.js
index e6f72e9..300ddd4 100644
--- a/frontend/public/js/patient/modules/validation-manager.js
+++ b/frontend/public/js/patient/modules/validation-manager.js
@@ -1,3 +1,6 @@
+import logger from "../../logger.js";
+import { parseYMDToLocalDate } from "../../utils/date-utils.js";
+
 class PatientValidationManager {
   constructor() {
     this.validationRules = {
@@ -179,12 +182,12 @@ class PatientValidationManager {
       return { isValid: false, errors, warnings };
     }
 
-    const date = new Date(admissionDate + "T00:00:00");
-    const today = new Date();
-    today.setHours(0, 0, 0, 0);
+  const date = parseYMDToLocalDate(admissionDate);
+  const today = new Date();
+  today.setHours(0, 0, 0, 0);
 
     // Verificar que sea una fecha v√°lida
-    if (isNaN(date.getTime())) {
+    if (!date || isNaN(date.getTime())) {
       errors.push("La fecha de admisi√≥n no es v√°lida");
       return { isValid: false, errors, warnings };
     }
@@ -269,7 +272,7 @@ class PatientValidationManager {
   setupRealTimeValidation(formId) {
     const form = document.getElementById(formId);
     if (!form) {
-      console.warn(`‚ö†Ô∏è Formulario ${formId} no encontrado para validaci√≥n`);
+      logger.warn(`‚ö†Ô∏è Formulario ${formId} no encontrado para validaci√≥n`);
       return;
     }
 
@@ -305,7 +308,7 @@ class PatientValidationManager {
       }
     });
 
-    console.log(`‚úÖ Validaci√≥n en tiempo real configurada para ${formId}`);
+  logger.info(`Validaci√≥n en tiempo real configurada para ${formId}`);
   }
 
   // Validar campo en tiempo real
@@ -391,7 +394,7 @@ class PatientValidationManager {
   clearFormValidation(formId) {
     const form = document.getElementById(formId);
     if (!form) {
-      console.warn(
+      logger.warn(
         `‚ö†Ô∏è Formulario ${formId} no encontrado para limpiar validaci√≥n`
       );
       return;
@@ -403,7 +406,7 @@ class PatientValidationManager {
       this.clearFieldValidation(field);
     });
 
-    console.log(`üßπ Validaci√≥n del formulario ${formId} limpiada`);
+  logger.debug(`Validaci√≥n del formulario ${formId} limpiada`);
   }
 
   // Validar formulario completo
diff --git a/frontend/public/js/patient/patient-add-controller.js b/frontend/public/js/patient/patient-add-controller.js
index a955305..2f6e090 100644
--- a/frontend/public/js/patient/patient-add-controller.js
+++ b/frontend/public/js/patient/patient-add-controller.js
@@ -1,5 +1,6 @@
 // Importar el controlador modular de pacientes
 import PatientController from "./modules/index.js";
+import logger from "../logger.js";
 
 // Variables globales del controlador
 let patientController;
@@ -7,21 +8,21 @@ let isInitialized = false;
 
 // Inicializaci√≥n cuando el DOM est√° listo
 document.addEventListener("DOMContentLoaded", async () => {
-  console.log("‚ûï Inicializando controlador de agregar paciente modular...");
+  logger.info("Inicializando controlador de agregar paciente modular...");
 
   try {
     // Verificar si el PatientController global ya est√° disponible
     if (window.patientController) {
-      patientController = window.patientController;
-      console.log("‚úÖ Usando PatientController global existente");
+  patientController = window.patientController;
+  logger.info("Usando PatientController global existente");
     } else {
       // Crear instancia local del controlador modular
       patientController = new PatientController();
       await patientController.init();
 
       // Hacer disponible globalmente
-      window.patientController = patientController;
-      console.log("‚úÖ PatientController modular inicializado");
+  window.patientController = patientController;
+  logger.info("PatientController modular inicializado");
     }
 
     isInitialized = true;
@@ -31,13 +32,9 @@ document.addEventListener("DOMContentLoaded", async () => {
 
     // Configurar formulario espec√≠fico de agregar
     setupAddForm();
-
-    console.log("üéâ Controlador de agregar paciente modular listo");
+    logger.info("Controlador de agregar paciente modular listo");
   } catch (error) {
-    console.error(
-      "‚ùå Error al inicializar controlador de agregar paciente:",
-      error
-    );
+    logger.error("Error al inicializar controlador de agregar paciente:", error);
     showErrorMessage(
       "Error al cargar el formulario de agregar paciente. Por favor, recargue la p√°gina."
     );
@@ -89,24 +86,21 @@ function setupGlobalFunctions() {
       const validation =
         patientController.validationManager.validatePatientData(data);
 
-      console.log("üëÄ Vista previa de datos del paciente:", {
-        data: data,
-        validation: validation,
-      });
+      logger.debug("Vista previa de datos del paciente:", { data, validation });
 
       return { data, validation };
     }
     return null;
   };
 
-  console.log("‚úÖ Funciones globales de agregar configuradas");
+  logger.info("Funciones globales de agregar configuradas");
 }
 
 // Configurar formulario espec√≠fico de agregar
 function setupAddForm() {
   const addForm = document.getElementById("add_new_patient");
   if (!addForm) {
-    console.warn("‚ö†Ô∏è Formulario add_new_patient no encontrado");
+    logger.warn("‚ö†Ô∏è Formulario add_new_patient no encontrado");
     return;
   }
 
@@ -145,26 +139,26 @@ function setupAddForm() {
   try {
     const STORAGE_KEY = "patient_draft_data";
     const draft = localStorage.getItem(STORAGE_KEY);
-    if (draft) {
+  if (draft) {
       // Si el formulario est√° vac√≠o (sin valores), podemos eliminar el borrador
       const hasValues = Array.from(addForm.elements).some((el) => {
         if (!el.name) return false;
         const v = el.value;
         return v !== null && v !== undefined && v.toString().trim() !== "";
       });
-      if (!hasValues) {
+        if (!hasValues) {
         localStorage.removeItem(STORAGE_KEY);
-        console.log("üßπ Borrador detectado y eliminado al cargar la p√°gina de agregar paciente");
+        logger.info("Borrador detectado y eliminado al cargar la p√°gina de agregar paciente");
       }
     }
   } catch (err) {
-    console.warn("‚ö†Ô∏è Error comprobando/limpiando borrador al cargar add patient:", err);
+    logger.warn("‚ö†Ô∏è Error comprobando/limpiando borrador al cargar add patient:", err);
   }
 
   // Configurar ayuda contextual
   setupContextualHelp(addForm);
 
-  console.log("‚úÖ Formulario de agregar configurado");
+  logger.debug("‚úÖ Formulario de agregar configurado");
 }
 
 // Configurar auto-guardado en localStorage
@@ -370,6 +364,6 @@ window.debugPatientAddController = function () {
 // Exportar para uso en m√≥dulos
 export default patientController;
 
-console.log(
-  "‚ûï Controlador de agregar paciente modular cargado - Debugging: window.debugPatientAddController()"
+logger.debug(
+  "Controlador de agregar paciente modular cargado - Debugging: window.debugPatientAddController()"
 );
diff --git a/frontend/public/js/patient/patient-controller.js b/frontend/public/js/patient/patient-controller.js
index a90b5fb..cbf57a2 100644
--- a/frontend/public/js/patient/patient-controller.js
+++ b/frontend/public/js/patient/patient-controller.js
@@ -1,5 +1,6 @@
 // Importar el controlador modular de pacientes
 import PatientController from "./modules/index.js";
+import logger from "../logger.js";
 
 // Variables globales del controlador
 let patientController;
@@ -7,13 +8,13 @@ let isInitialized = false;
 
 // Inicializaci√≥n cuando el DOM est√° listo
 document.addEventListener("DOMContentLoaded", async () => {
-  console.log("üè• Inicializando controlador de pacientes modular...");
+  logger.log("ÔøΩ Inicializando controlador de pacientes modular...");
 
   try {
     // Verificar si el PatientController global ya est√° disponible
     if (window.patientController) {
       patientController = window.patientController;
-      console.log("‚úÖ Usando PatientController global existente");
+      logger.log("‚úÖ Usando PatientController global existente");
     } else {
       // Crear instancia local del controlador modular
       patientController = new PatientController();
@@ -21,7 +22,7 @@ document.addEventListener("DOMContentLoaded", async () => {
 
       // Hacer disponible globalmente
       window.patientController = patientController;
-      console.log("‚úÖ PatientController modular inicializado");
+      logger.log("‚úÖ PatientController modular inicializado");
     }
 
     isInitialized = true;
@@ -29,9 +30,9 @@ document.addEventListener("DOMContentLoaded", async () => {
     // Configurar funciones globales para compatibilidad
     setupGlobalFunctions();
 
-    console.log("üéâ Controlador de pacientes modular listo");
+    logger.log("üéâ Controlador de pacientes modular listo");
   } catch (error) {
-    console.error("‚ùå Error al inicializar controlador de pacientes:", error);
+    logger.error("‚ùå Error al inicializar controlador de pacientes:", error);
     showErrorMessage(
       "Error al cargar el sistema de pacientes. Por favor, recargue la p√°gina."
     );
@@ -107,7 +108,7 @@ function setupGlobalFunctions() {
     return [];
   };
 
-  console.log("‚úÖ Funciones globales configuradas");
+  logger.info("Funciones globales configuradas");
 }
 
 // Funci√≥n para mostrar errores
@@ -165,6 +166,6 @@ window.debugPatientController = function () {
 // Exportar para uso en m√≥dulos
 export default patientController;
 
-console.log(
-  "üè• Controlador de pacientes modular cargado - Debugging: window.debugPatientController()"
+logger.debug(
+  "Controlador de pacientes modular cargado - Debugging: window.debugPatientController()"
 );
diff --git a/frontend/public/js/patient/patient-edit-controller.js b/frontend/public/js/patient/patient-edit-controller.js
index 912cfd4..415d874 100644
--- a/frontend/public/js/patient/patient-edit-controller.js
+++ b/frontend/public/js/patient/patient-edit-controller.js
@@ -1,5 +1,6 @@
 // Importar el controlador modular de pacientes
 import PatientController from "./modules/index.js";
+import logger from "../logger.js";
 
 // Variables globales del controlador
 let patientController;
@@ -8,25 +9,25 @@ let currentPatientId = null;
 
 // Inicializaci√≥n cuando el DOM est√° listo
 document.addEventListener("DOMContentLoaded", async () => {
-  console.log("‚úèÔ∏è Inicializando controlador de editar paciente modular...");
+  logger.info("Inicializando controlador de editar paciente modular...");
 
   try {
     // Obtener ID del paciente
-    currentPatientId = getPatientId();
-    console.log(`üîç ID del paciente a editar: ${currentPatientId}`);
+  currentPatientId = getPatientId();
+  logger.debug(`ID del paciente a editar: ${currentPatientId}`);
 
     // Verificar si el PatientController global ya est√° disponible
     if (window.patientController) {
-      patientController = window.patientController;
-      console.log("‚úÖ Usando PatientController global existente");
+  patientController = window.patientController;
+  logger.info("Usando PatientController global existente");
     } else {
       // Crear instancia local del controlador modular
       patientController = new PatientController();
       await patientController.init();
 
       // Hacer disponible globalmente
-      window.patientController = patientController;
-      console.log("‚úÖ PatientController modular inicializado");
+  window.patientController = patientController;
+  logger.info("PatientController modular inicializado");
     }
 
     isInitialized = true;
@@ -39,12 +40,9 @@ document.addEventListener("DOMContentLoaded", async () => {
       await loadPatientForEdit(currentPatientId);
     }
 
-    console.log("üéâ Controlador de editar paciente modular listo");
+  logger.info("Controlador de editar paciente modular listo");
   } catch (error) {
-    console.error(
-      "‚ùå Error al inicializar controlador de editar paciente:",
-      error
-    );
+      logger.error("Error al inicializar controlador de editar paciente:", error);
     showErrorMessage(
       "Error al cargar el formulario de edici√≥n. Por favor, recargue la p√°gina."
     );
@@ -78,14 +76,14 @@ function getPatientId() {
     return idField.value;
   }
 
-  console.warn("‚ö†Ô∏è No se pudo obtener el ID del paciente");
+  logger.warn("No se pudo obtener el ID del paciente");
   return null;
 }
 
 // Cargar datos del paciente para edici√≥n
 async function loadPatientForEdit(patientId) {
   try {
-    console.log(`üìã Cargando paciente ${patientId} para edici√≥n...`);
+  logger.info(`Cargando paciente ${patientId} para edici√≥n...`);
 
     showMessage("Cargando datos del paciente...", "info");
 
@@ -96,10 +94,10 @@ async function loadPatientForEdit(patientId) {
 
     showMessage("Datos cargados correctamente", "success", 2000);
 
-    console.log("‚úÖ Paciente cargado para edici√≥n:", patient);
+  logger.info("Paciente cargado para edici√≥n:", patient);
     return patient;
   } catch (error) {
-    console.error(`‚ùå Error al cargar paciente ${patientId}:`, error);
+  logger.error(`Error al cargar paciente ${patientId}:`, error);
     showErrorMessage(
       `Error al cargar los datos del paciente: ${error.message}`
     );
@@ -195,7 +193,7 @@ function setupGlobalFunctions() {
     return false;
   };
 
-  console.log("‚úÖ Funciones globales de edici√≥n configuradas");
+  logger.info("Funciones globales de edici√≥n configuradas");
 }
 
 // Configurar advertencia antes de salir si hay cambios no guardados
@@ -339,6 +337,6 @@ window.debugPatientEditController = function () {
 // Exportar para uso en m√≥dulos
 export default patientController;
 
-console.log(
-  "‚úèÔ∏è Controlador de editar paciente modular cargado - Debugging: window.debugPatientEditController()"
+logger.debug(
+  "Controlador de editar paciente modular cargado - Debugging: window.debugPatientEditController()"
 );
diff --git a/frontend/public/js/patient/patient-list-controller.js b/frontend/public/js/patient/patient-list-controller.js
index d842eca..b757ef5 100644
--- a/frontend/public/js/patient/patient-list-controller.js
+++ b/frontend/public/js/patient/patient-list-controller.js
@@ -1,5 +1,6 @@
 // Importar el controlador modular de pacientes
 import PatientController from "./modules/index.js";
+import logger from "../logger.js";
 
 // Variables globales del controlador
 let patientController;
@@ -7,21 +8,21 @@ let isInitialized = false;
 
 // Inicializaci√≥n cuando el DOM est√° listo
 document.addEventListener("DOMContentLoaded", async () => {
-  console.log("üìã Inicializando controlador de lista de pacientes modular...");
+  logger.info("Inicializando controlador de lista de pacientes modular...");
 
   try {
     // Verificar si el PatientController global ya est√° disponible
     if (window.patientController) {
-      patientController = window.patientController;
-      console.log("‚úÖ Usando PatientController global existente");
+  patientController = window.patientController;
+  logger.info("Usando PatientController global existente");
     } else {
       // Crear instancia local del controlador modular
       patientController = new PatientController();
       await patientController.init();
 
       // Hacer disponible globalmente
-      window.patientController = patientController;
-      console.log("‚úÖ PatientController modular inicializado");
+  window.patientController = patientController;
+  logger.info("PatientController modular inicializado");
     }
 
     isInitialized = true;
@@ -34,7 +35,7 @@ document.addEventListener("DOMContentLoaded", async () => {
       await loadPatientsList();
     }
 
-    console.log("üéâ Controlador de lista de pacientes modular listo");
+  logger.info("Controlador de lista de pacientes modular listo");
   } catch (error) {
     console.error(
       "‚ùå Error al inicializar controlador de lista de pacientes:",
@@ -97,15 +98,15 @@ function setupGlobalFunctions() {
     }
   };
 
-  console.log("‚úÖ Funciones globales de lista configuradas");
+  logger.info("Funciones globales de lista configuradas");
 }
 
 // Funci√≥n auxiliar para cargar lista
 async function loadPatientsList() {
   try {
-    console.log("üìä Cargando lista de pacientes...");
-    const patients = await patientController.loadList();
-    console.log(`‚úÖ ${patients.length} pacientes cargados`);
+  logger.info("Cargando lista de pacientes...");
+  const patients = await patientController.loadList();
+  logger.info(`${patients.length} pacientes cargados`);
     return patients;
   } catch (error) {
     console.error("‚ùå Error al cargar lista:", error);
@@ -172,6 +173,6 @@ window.debugPatientListController = function () {
 // Exportar para uso en m√≥dulos
 export default patientController;
 
-console.log(
-  "üìã Controlador de lista de pacientes modular cargado - Debugging: window.debugPatientListController()"
+logger.debug(
+  "Controlador de lista de pacientes modular cargado - Debugging: window.debugPatientListController()"
 );
diff --git a/frontend/public/js/test-connection.js b/frontend/public/js/test-connection.js
index ed0e21e..977bafa 100644
--- a/frontend/public/js/test-connection.js
+++ b/frontend/public/js/test-connection.js
@@ -1,102 +1,12 @@
-async function testConnection() {
-  console.log("üöÄ Probando conexi√≥n con la API...");
+// Archivo archivado: la versi√≥n activa del test fue movida a
+// `frontend/public/js/debug-scripts/test-connection.js` para evitar servirlo en producci√≥n.
+// Contenido original preservado en la carpeta debug-scripts.
 
-  try {
-    // Probar conexi√≥n b√°sica
-    const response = await fetch("http://localhost:8080/dentists");
-
-    if (response.ok) {
-      const dentists = await response.json();
-      console.log("‚úÖ Conexi√≥n exitosa!");
-      console.log(`üìä Dentistas encontrados: ${dentists.length}`);
-      console.log("üë• Datos:", dentists);
-
-      // Probar crear un dentista de prueba
-      const testDentist = {
-        registrationNumber: 12345,
-        name: "Dr. Test",
-        lastName: "Conexi√≥n",
-      };
-
-      console.log("üß™ Creando dentista de prueba...");
-      const createResponse = await fetch("http://localhost:8080/dentists", {
-        method: "POST",
-        headers: {
-          "Content-Type": "application/json",
-        },
-        body: JSON.stringify(testDentist),
-      });
-
-      if (createResponse.ok) {
-        const newDentist = await createResponse.json();
-        console.log("‚úÖ Dentista creado exitosamente!");
-        console.log("üÜî ID asignado:", newDentist.id);
-
-        // Listar dentistas nuevamente
-        const updatedResponse = await fetch("http://localhost:8080/dentists");
-        const updatedDentists = await updatedResponse.json();
-        console.log(`üìä Total de dentistas ahora: ${updatedDentists.length}`);
-
-        return {
-          status: "success",
-          message: "Conexi√≥n y CRUD funcionando correctamente",
-          totalDentists: updatedDentists.length,
-          testDentistId: newDentist.id,
-        };
-      } else {
-        throw new Error(`Error al crear dentista: ${createResponse.status}`);
-      }
-    } else {
-      throw new Error(
-        `Error de conexi√≥n: ${response.status} ${response.statusText}`
-      );
-    }
-  } catch (error) {
-    console.error("‚ùå Error de conexi√≥n:", error.message);
-    console.log("üí° Soluciones posibles:");
-    console.log("   1. Verificar que el backend est√© corriendo en puerto 8080");
-    console.log("   2. Ejecutar: cd backend && ./mvnw.cmd spring-boot:run");
-    console.log("   3. Verificar que no haya conflictos de puerto");
-
-    return {
-      status: "error",
-      message: error.message,
-      solutions: [
-        "Verificar que el backend est√© corriendo",
-        "Comprobar la configuraci√≥n CORS",
-        "Revisar los logs del servidor",
-      ],
-    };
-  }
+// No-op exports para compatibilidad en caso de import accidental.
+export async function testConnection() {
+  return { status: 'archived' };
 }
 
-// Funci√≥n para limpiar datos de prueba
-async function cleanTestData() {
-  try {
-    const response = await fetch("http://localhost:8080/dentists");
-    const dentists = await response.json();
-
-    const testDentists = dentists.filter(
-      (d) => d.name === "Dr. Test" && d.lastName === "Conexi√≥n"
-    );
-
-    for (const dentist of testDentists) {
-      await fetch(`http://localhost:8080/dentists/${dentist.id}`, {
-        method: "DELETE",
-      });
-      console.log(`üóëÔ∏è Dentista de prueba eliminado: ID ${dentist.id}`);
-    }
-
-    console.log("‚úÖ Datos de prueba limpiados");
-  } catch (error) {
-    console.error("‚ùå Error al limpiar datos:", error);
-  }
+export async function cleanTestData() {
+  return { status: 'archived' };
 }
-
-// Exportar funciones para uso
-window.testConnection = testConnection;
-window.cleanTestData = cleanTestData;
-
-console.log("üîß Funciones de prueba cargadas:");
-console.log("   - testConnection(): Probar conexi√≥n y CRUD");
-console.log("   - cleanTestData(): Limpiar datos de prueba");
diff --git a/frontend/public/js/test-register.js b/frontend/public/js/test-register.js
index 11a67d1..19b8a88 100644
--- a/frontend/public/js/test-register.js
+++ b/frontend/public/js/test-register.js
@@ -1,82 +1,8 @@
-// Simple script de diagn√≥stico para el registro
-console.log("üîç DIAGN√ìSTICO DE REGISTRO INICIADO");
+// Archivo archivado: la versi√≥n activa del test fue movida a
+// `frontend/public/js/debug-scripts/test-register.js` para evitar servirlo en producci√≥n.
+// Contenido original preservado en la carpeta debug-scripts.
 
-document.addEventListener("DOMContentLoaded", function() {
-  console.log("üîç DOM Cargado - Verificando elementos...");
-  
-  // Verificar que los elementos existen
-  const form = document.getElementById('registerForm');
-  const passwordField = document.querySelector('[name="password"]');
-  const confirmPasswordField = document.querySelector('[name="confirmPassword"]');
-  const submitButton = form?.querySelector('button[type="submit"]');
-  
-  console.log("üîç Elementos encontrados:", {
-    form: !!form,
-    passwordField: !!passwordField,
-    confirmPasswordField: !!confirmPasswordField,
-    submitButton: !!submitButton
-  });
-  
-  // Verificar que las clases globales est√©n disponibles
-  console.log("üîç Clases globales:", {
-    AuthValidationManager: typeof window.AuthValidationManager,
-    authController: typeof window.authController
-  });
-  
-  if (passwordField && confirmPasswordField) {
-    console.log("‚úÖ Configurando listeners de prueba...");
-    
-    // Listener simple para confirmPassword
-    confirmPasswordField.addEventListener('input', function() {
-      const password = passwordField.value;
-      const confirmPassword = this.value;
-      const errorContainer = document.getElementById('confirmPassword-error');
-      
-      console.log(`üîç Validaci√≥n: password='${password}', confirm='${confirmPassword}'`);
-      
-      if (confirmPassword && password !== confirmPassword) {
-        console.log("‚ùå Contrase√±as NO coinciden");
-        if (errorContainer) {
-          errorContainer.textContent = 'Las contrase√±as no coinciden';
-          errorContainer.style.display = 'block';
-        }
-        this.classList.add('is-invalid');
-        this.classList.remove('is-valid');
-      } else if (confirmPassword && password === confirmPassword) {
-        console.log("‚úÖ Contrase√±as S√ç coinciden");
-        if (errorContainer) {
-          errorContainer.textContent = '';
-          errorContainer.style.display = 'none';
-        }
-        this.classList.remove('is-invalid');
-        this.classList.add('is-valid');
-      }
-    });
-  }
-  
-  if (form) {
-    form.addEventListener('submit', function(e) {
-      e.preventDefault();
-      console.log("üîç FORMULARIO ENVIADO - Datos:");
-      
-      const formData = new FormData(this);
-      const data = Object.fromEntries(formData.entries());
-      console.log(data);
-      
-      // Verificar espec√≠ficamente los datos de direcci√≥n
-      console.log("üè† Datos de direcci√≥n:", {
-        street: data.street,
-        number: data.number,
-        location: data.location,
-        province: data.province
-      });
-      
-      // Verificar contrase√±as
-      console.log("üîê Validaci√≥n de contrase√±as:", {
-        password: data.password,
-        confirmPassword: data.confirmPassword,
-        match: data.password === data.confirmPassword
-      });
-    });
-  }
-});
+// No-op export para compatibilidad en caso de import accidental.
+export default function __test_register_archived__() {
+  // test-register archivado
+}
diff --git a/frontend/public/js/utils/date-utils.js b/frontend/public/js/utils/date-utils.js
new file mode 100644
index 0000000..d0e466f
--- /dev/null
+++ b/frontend/public/js/utils/date-utils.js
@@ -0,0 +1,34 @@
+// Utilidades para parseo y formateo de fechas en cliente
+// Evitan el desfase de d√≠a provocado por new Date('YYYY-MM-DD') que se interpreta como UTC
+export function parseYMDToLocalDate(dateInput) {
+  if (!dateInput) return null;
+  try {
+    if (typeof dateInput === 'string' && /^\d{4}-\d{2}-\d{2}$/.test(dateInput)) {
+      const parts = dateInput.split('-');
+      const y = Number(parts[0]);
+      const m = Number(parts[1]) - 1;
+      const d = Number(parts[2]);
+      return new Date(y, m, d);
+    }
+    // Aceptar Date u otros formatos ISO/UTC como fallback
+    const dt = dateInput instanceof Date ? dateInput : new Date(dateInput);
+    return dt;
+  } catch (e) {
+    return null;
+  }
+}
+
+export function formatLocalDate(dateInput, locale = 'es-ES', options = { year: 'numeric', month: 'long', day: 'numeric' }) {
+  try {
+    const d = dateInput instanceof Date ? dateInput : parseYMDToLocalDate(dateInput);
+    if (!d || isNaN(d.getTime())) return dateInput;
+    return d.toLocaleDateString(locale, options);
+  } catch (e) {
+    return dateInput;
+  }
+}
+
+export default {
+  parseYMDToLocalDate,
+  formatLocalDate,
+};
diff --git a/frontend/src/controllers/auth/postLogin.js b/frontend/src/controllers/auth/postLogin.js
index 4103ed2..8f6e8af 100644
--- a/frontend/src/controllers/auth/postLogin.js
+++ b/frontend/src/controllers/auth/postLogin.js
@@ -94,7 +94,6 @@ const postLogin = async (req, res) => {
                   localStorage.setItem('userName', '${firstName || ""}');
                   localStorage.setItem('userLastName', '${lastName || ""}');
                   
-                  console.log('‚úÖ LocalStorage sincronizado por el servidor');
                 </script>
               </body>
               </html>
diff --git a/frontend/src/controllers/auth/postNewUser.js b/frontend/src/controllers/auth/postNewUser.js
index 1606fa7..d04b245 100644
--- a/frontend/src/controllers/auth/postNewUser.js
+++ b/frontend/src/controllers/auth/postNewUser.js
@@ -18,7 +18,7 @@ const postNewUser = async (req, res) => {
       });
     }
 
-    console.log("üîç Datos recibidos en postNewUser:", req.body);
+  // Datos recibidos (log deshabilitado en modo producci√≥n)
 
     const {
       firstName,
@@ -49,12 +49,7 @@ const postNewUser = async (req, res) => {
     if (admissionDate) userData.admissionDate = admissionDate;
 
     // CREAR objeto address para el backend Spring Boot
-    console.log("üè† Verificando datos de direcci√≥n:", {
-      street: street,
-      number: number,
-      location: location,
-      province: province,
-    });
+    // Verificando datos de direcci√≥n (silenciado)
 
     const hasAddressData = street || number || location || province;
 
@@ -66,12 +61,12 @@ const postNewUser = async (req, res) => {
         province: province || "",
       };
 
-      console.log("‚úÖ Objeto address creado:", userData.address);
+  // Objeto address creado (silenciado)
     } else {
-      console.log("‚ö†Ô∏è No se encontraron datos de direcci√≥n");
+  // No se encontraron datos de direcci√≥n (silenciado)
     }
 
-    console.log("üì§ Datos finales a enviar al backend Spring Boot:", userData);
+  // Datos finales preparados para backend (silenciado)
 
     // Llamar al backend Spring Boot para registrar usuario
     const backendResponse = await axios.post(
@@ -82,7 +77,7 @@ const postNewUser = async (req, res) => {
     // Si el registro fue exitoso, redirigir al login
     if (backendResponse.status === 200 || backendResponse.status === 201) {
       // Para pacientes, no auto-login, redirigir a login para que inicien sesi√≥n
-      console.log("Usuario registrado exitosamente:", backendResponse.data);
+  // Registro exitoso (silenciado)
 
       // Redirigir al login para que inicie sesi√≥n manualmente
       return res.redirect("/users/login?registered=true");
diff --git a/frontend/src/views/appointments/appointmentList.ejs b/frontend/src/views/appointments/appointmentList.ejs
index 13554ef..e4e6a32 100644
--- a/frontend/src/views/appointments/appointmentList.ejs
+++ b/frontend/src/views/appointments/appointmentList.ejs
@@ -53,8 +53,8 @@
             </div>
             <div class="col-md-2">
               <select id="filterStatus" class="form-control auth-input">
-                <option value="SCHEDULED" selected>Agendadas</option>
-                <option value="">Todas</option>
+                <option value="" selected>Todas</option>
+                <option value="SCHEDULED">Agendadas</option>
                 <option value="COMPLETED">Completadas</option>
                 <option value="CANCELLED">Canceladas</option>
                 <option value="IN_PROGRESS">En Progreso</option>
diff --git a/frontend/src/views/dashboard/dashboard.ejs b/frontend/src/views/dashboard/dashboard.ejs
index efcf848..b08b3ca 100644
--- a/frontend/src/views/dashboard/dashboard.ejs
+++ b/frontend/src/views/dashboard/dashboard.ejs
@@ -101,7 +101,7 @@
                 <div class="card-header bg-white border-bottom">
                   <h5 class="card-title mb-0">
                     <i class="bi bi-clock text-warning me-2"></i>
-                    Citas de hoy
+                    Proximas citas
                   </h5>
                 </div>
                 <div class="card-body p-0">
diff --git a/frontend/src/views/landing/index.ejs b/frontend/src/views/landing/index.ejs
index e667df5..2af96f7 100644
--- a/frontend/src/views/landing/index.ejs
+++ b/frontend/src/views/landing/index.ejs
@@ -19,7 +19,7 @@
 
             <!-- Hero Title -->
             <h1 class="hero-title">
-              <img src="/assets/Isotipo.webp" alt="Cl√≠nica Dental" class="hero-logo"> Cl√≠nica Dental MVC
+              <img src="/assets/Isotipo.webp" alt="Dental Clinic" class="hero-logo"> Dental Clinic
             </h1>
 
             <!-- Hero Subtitle -->
